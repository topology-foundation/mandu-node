// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topology/node/rpc.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeCroRequest struct {
	CroId string `protobuf:"bytes,1,opt,name=cro_id,json=croId,proto3" json:"cro_id,omitempty"`
}

func (m *SubscribeCroRequest) Reset()         { *m = SubscribeCroRequest{} }
func (m *SubscribeCroRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeCroRequest) ProtoMessage()    {}
func (*SubscribeCroRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e9fe7adfbf52096, []int{0}
}
func (m *SubscribeCroRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeCroRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeCroRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeCroRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCroRequest.Merge(m, src)
}
func (m *SubscribeCroRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeCroRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCroRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCroRequest proto.InternalMessageInfo

func (m *SubscribeCroRequest) GetCroId() string {
	if m != nil {
		return m.CroId
	}
	return ""
}

type SubscribeCroResponse struct {
	// can return error codes if different than 0
	ReturnCode int32 `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
}

func (m *SubscribeCroResponse) Reset()         { *m = SubscribeCroResponse{} }
func (m *SubscribeCroResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeCroResponse) ProtoMessage()    {}
func (*SubscribeCroResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e9fe7adfbf52096, []int{1}
}
func (m *SubscribeCroResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeCroResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeCroResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeCroResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeCroResponse.Merge(m, src)
}
func (m *SubscribeCroResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeCroResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeCroResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeCroResponse proto.InternalMessageInfo

func (m *SubscribeCroResponse) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

type UnsubscribeCroRequest struct {
	CroId string `protobuf:"bytes,1,opt,name=cro_id,json=croId,proto3" json:"cro_id,omitempty"`
}

func (m *UnsubscribeCroRequest) Reset()         { *m = UnsubscribeCroRequest{} }
func (m *UnsubscribeCroRequest) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeCroRequest) ProtoMessage()    {}
func (*UnsubscribeCroRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e9fe7adfbf52096, []int{2}
}
func (m *UnsubscribeCroRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscribeCroRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscribeCroRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsubscribeCroRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeCroRequest.Merge(m, src)
}
func (m *UnsubscribeCroRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscribeCroRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeCroRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeCroRequest proto.InternalMessageInfo

func (m *UnsubscribeCroRequest) GetCroId() string {
	if m != nil {
		return m.CroId
	}
	return ""
}

type UnsubscribeCroResponse struct {
	// can return error codes if different than 0
	ReturnCode int32 `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
}

func (m *UnsubscribeCroResponse) Reset()         { *m = UnsubscribeCroResponse{} }
func (m *UnsubscribeCroResponse) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeCroResponse) ProtoMessage()    {}
func (*UnsubscribeCroResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e9fe7adfbf52096, []int{3}
}
func (m *UnsubscribeCroResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscribeCroResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscribeCroResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsubscribeCroResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeCroResponse.Merge(m, src)
}
func (m *UnsubscribeCroResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscribeCroResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeCroResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeCroResponse proto.InternalMessageInfo

func (m *UnsubscribeCroResponse) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

type GetCroHashGraphRequest struct {
	CroId string `protobuf:"bytes,1,opt,name=cro_id,json=croId,proto3" json:"cro_id,omitempty"`
}

func (m *GetCroHashGraphRequest) Reset()         { *m = GetCroHashGraphRequest{} }
func (m *GetCroHashGraphRequest) String() string { return proto.CompactTextString(m) }
func (*GetCroHashGraphRequest) ProtoMessage()    {}
func (*GetCroHashGraphRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e9fe7adfbf52096, []int{4}
}
func (m *GetCroHashGraphRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCroHashGraphRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCroHashGraphRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCroHashGraphRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCroHashGraphRequest.Merge(m, src)
}
func (m *GetCroHashGraphRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCroHashGraphRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCroHashGraphRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCroHashGraphRequest proto.InternalMessageInfo

func (m *GetCroHashGraphRequest) GetCroId() string {
	if m != nil {
		return m.CroId
	}
	return ""
}

type GetCroHashGraphResponse struct {
	// linearized vertices hashes
	VerticesHashes []string `protobuf:"bytes,1,rep,name=vertices_hashes,json=verticesHashes,proto3" json:"vertices_hashes,omitempty"`
}

func (m *GetCroHashGraphResponse) Reset()         { *m = GetCroHashGraphResponse{} }
func (m *GetCroHashGraphResponse) String() string { return proto.CompactTextString(m) }
func (*GetCroHashGraphResponse) ProtoMessage()    {}
func (*GetCroHashGraphResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e9fe7adfbf52096, []int{5}
}
func (m *GetCroHashGraphResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCroHashGraphResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCroHashGraphResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCroHashGraphResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCroHashGraphResponse.Merge(m, src)
}
func (m *GetCroHashGraphResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCroHashGraphResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCroHashGraphResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCroHashGraphResponse proto.InternalMessageInfo

func (m *GetCroHashGraphResponse) GetVerticesHashes() []string {
	if m != nil {
		return m.VerticesHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeCroRequest)(nil), "topology.node.SubscribeCroRequest")
	proto.RegisterType((*SubscribeCroResponse)(nil), "topology.node.SubscribeCroResponse")
	proto.RegisterType((*UnsubscribeCroRequest)(nil), "topology.node.UnsubscribeCroRequest")
	proto.RegisterType((*UnsubscribeCroResponse)(nil), "topology.node.UnsubscribeCroResponse")
	proto.RegisterType((*GetCroHashGraphRequest)(nil), "topology.node.GetCroHashGraphRequest")
	proto.RegisterType((*GetCroHashGraphResponse)(nil), "topology.node.GetCroHashGraphResponse")
}

func init() { proto.RegisterFile("topology/node/rpc.proto", fileDescriptor_8e9fe7adfbf52096) }

var fileDescriptor_8e9fe7adfbf52096 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0x02, 0x51,
	0x14, 0xc5, 0x9d, 0x42, 0xc1, 0x6b, 0x29, 0xbc, 0xf2, 0x0f, 0x42, 0x93, 0xd8, 0x3f, 0x17, 0x31,
	0x03, 0xb5, 0x90, 0xb6, 0xba, 0xd0, 0xb6, 0x53, 0x11, 0x44, 0x60, 0xe3, 0x9b, 0x8b, 0x33, 0x10,
	0x73, 0x5f, 0xef, 0xbd, 0x89, 0xfc, 0x16, 0x7d, 0x8a, 0x3e, 0x4b, 0x4b, 0x97, 0x2d, 0x43, 0xbf,
	0x48, 0xa8, 0x23, 0x34, 0x26, 0xe9, 0xf6, 0xdc, 0x73, 0x38, 0x87, 0x1f, 0x17, 0xca, 0x9a, 0x04,
	0x3d, 0xd3, 0x60, 0x68, 0x87, 0xe4, 0xa1, 0x2d, 0x05, 0xb7, 0x84, 0x24, 0x4d, 0x6c, 0x77, 0x71,
	0xb0, 0xa6, 0x87, 0xfa, 0x39, 0xec, 0xdd, 0x44, 0x7d, 0xc5, 0x65, 0xd0, 0xc7, 0xb6, 0x24, 0x07,
	0x5f, 0x22, 0x54, 0x9a, 0x15, 0x21, 0xc3, 0x25, 0xf5, 0x02, 0xaf, 0x62, 0xd4, 0x8c, 0x46, 0xd6,
	0x49, 0x73, 0x49, 0xd7, 0x5e, 0xbd, 0x09, 0xfb, 0x49, 0xb7, 0x12, 0x14, 0x2a, 0x64, 0x87, 0x90,
	0x93, 0xa8, 0x23, 0x19, 0xf6, 0x38, 0x79, 0x38, 0xcb, 0xa4, 0x1d, 0x98, 0x4b, 0xed, 0x69, 0x8d,
	0x05, 0xc5, 0xbb, 0x50, 0x6d, 0x5e, 0x74, 0x05, 0xa5, 0x65, 0xff, 0xa6, 0x55, 0x36, 0x94, 0x3a,
	0xa8, 0xdb, 0x92, 0xba, 0xae, 0xf2, 0x3b, 0xd2, 0x15, 0xfe, 0x9a, 0xae, 0x16, 0x94, 0xff, 0x04,
	0xe2, 0xb2, 0x33, 0x28, 0xbc, 0xa2, 0xd4, 0x01, 0x47, 0xd5, 0xf3, 0x5d, 0xe5, 0xa3, 0xaa, 0x18,
	0xb5, 0xed, 0x46, 0xd6, 0xc9, 0x2f, 0xe4, 0xee, 0x4c, 0xbd, 0xf8, 0xd8, 0x82, 0xdc, 0x6d, 0x0c,
	0xd6, 0x11, 0x9c, 0xdd, 0xc3, 0xce, 0xef, 0xf5, 0xac, 0x6e, 0x25, 0xb0, 0x5b, 0x2b, 0x98, 0x57,
	0x8f, 0xfe, 0xf5, 0xc4, 0x8b, 0x1e, 0x21, 0x1f, 0x25, 0xc0, 0xb0, 0xe3, 0xa5, 0xd8, 0x4a, 0xce,
	0xd5, 0x8d, 0x5c, 0xec, 0x09, 0x0a, 0x83, 0x24, 0x0a, 0x76, 0xb2, 0x14, 0x5c, 0xcd, 0xb6, 0x7a,
	0xba, 0xce, 0x36, 0xdf, 0xdf, 0x6a, 0x7e, 0x8e, 0x4d, 0x63, 0x34, 0x36, 0x8d, 0xef, 0xb1, 0x69,
	0xbc, 0x4f, 0xcc, 0xd4, 0x68, 0x62, 0xa6, 0xbe, 0x26, 0x66, 0xea, 0xe1, 0x40, 0x93, 0xe0, 0xbe,
	0x1b, 0x84, 0xf6, 0x9b, 0x1d, 0x6f, 0x13, 0x3a, 0xa0, 0xd0, 0xd6, 0x43, 0x81, 0xaa, 0x9f, 0x99,
	0xbd, 0xef, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x17, 0x14, 0x2e, 0xd9, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopologyRpcClient is the client API for TopologyRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopologyRpcClient interface {
	SubscribeCro(ctx context.Context, in *SubscribeCroRequest, opts ...grpc.CallOption) (*SubscribeCroResponse, error)
	UnsubscribeCro(ctx context.Context, in *UnsubscribeCroRequest, opts ...grpc.CallOption) (*UnsubscribeCroRequest, error)
	GetCroHashGraph(ctx context.Context, in *GetCroHashGraphRequest, opts ...grpc.CallOption) (*GetCroHashGraphResponse, error)
}

type topologyRpcClient struct {
	cc grpc1.ClientConn
}

func NewTopologyRpcClient(cc grpc1.ClientConn) TopologyRpcClient {
	return &topologyRpcClient{cc}
}

func (c *topologyRpcClient) SubscribeCro(ctx context.Context, in *SubscribeCroRequest, opts ...grpc.CallOption) (*SubscribeCroResponse, error) {
	out := new(SubscribeCroResponse)
	err := c.cc.Invoke(ctx, "/topology.node.TopologyRpc/subscribeCro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyRpcClient) UnsubscribeCro(ctx context.Context, in *UnsubscribeCroRequest, opts ...grpc.CallOption) (*UnsubscribeCroRequest, error) {
	out := new(UnsubscribeCroRequest)
	err := c.cc.Invoke(ctx, "/topology.node.TopologyRpc/unsubscribeCro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyRpcClient) GetCroHashGraph(ctx context.Context, in *GetCroHashGraphRequest, opts ...grpc.CallOption) (*GetCroHashGraphResponse, error) {
	out := new(GetCroHashGraphResponse)
	err := c.cc.Invoke(ctx, "/topology.node.TopologyRpc/getCroHashGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyRpcServer is the server API for TopologyRpc service.
type TopologyRpcServer interface {
	SubscribeCro(context.Context, *SubscribeCroRequest) (*SubscribeCroResponse, error)
	UnsubscribeCro(context.Context, *UnsubscribeCroRequest) (*UnsubscribeCroRequest, error)
	GetCroHashGraph(context.Context, *GetCroHashGraphRequest) (*GetCroHashGraphResponse, error)
}

// UnimplementedTopologyRpcServer can be embedded to have forward compatible implementations.
type UnimplementedTopologyRpcServer struct {
}

func (*UnimplementedTopologyRpcServer) SubscribeCro(ctx context.Context, req *SubscribeCroRequest) (*SubscribeCroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeCro not implemented")
}
func (*UnimplementedTopologyRpcServer) UnsubscribeCro(ctx context.Context, req *UnsubscribeCroRequest) (*UnsubscribeCroRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeCro not implemented")
}
func (*UnimplementedTopologyRpcServer) GetCroHashGraph(ctx context.Context, req *GetCroHashGraphRequest) (*GetCroHashGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCroHashGraph not implemented")
}

func RegisterTopologyRpcServer(s grpc1.Server, srv TopologyRpcServer) {
	s.RegisterService(&_TopologyRpc_serviceDesc, srv)
}

func _TopologyRpc_SubscribeCro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeCroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRpcServer).SubscribeCro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topology.node.TopologyRpc/SubscribeCro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRpcServer).SubscribeCro(ctx, req.(*SubscribeCroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyRpc_UnsubscribeCro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeCroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRpcServer).UnsubscribeCro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topology.node.TopologyRpc/UnsubscribeCro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRpcServer).UnsubscribeCro(ctx, req.(*UnsubscribeCroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyRpc_GetCroHashGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCroHashGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRpcServer).GetCroHashGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topology.node.TopologyRpc/GetCroHashGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRpcServer).GetCroHashGraph(ctx, req.(*GetCroHashGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var TopologyRpc_serviceDesc = _TopologyRpc_serviceDesc
var _TopologyRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topology.node.TopologyRpc",
	HandlerType: (*TopologyRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subscribeCro",
			Handler:    _TopologyRpc_SubscribeCro_Handler,
		},
		{
			MethodName: "unsubscribeCro",
			Handler:    _TopologyRpc_UnsubscribeCro_Handler,
		},
		{
			MethodName: "getCroHashGraph",
			Handler:    _TopologyRpc_GetCroHashGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topology/node/rpc.proto",
}

func (m *SubscribeCroRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeCroRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeCroRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CroId) > 0 {
		i -= len(m.CroId)
		copy(dAtA[i:], m.CroId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.CroId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeCroResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeCroResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeCroResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReturnCode != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ReturnCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsubscribeCroRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscribeCroRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsubscribeCroRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CroId) > 0 {
		i -= len(m.CroId)
		copy(dAtA[i:], m.CroId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.CroId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsubscribeCroResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscribeCroResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsubscribeCroResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReturnCode != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ReturnCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCroHashGraphRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCroHashGraphRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCroHashGraphRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CroId) > 0 {
		i -= len(m.CroId)
		copy(dAtA[i:], m.CroId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.CroId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCroHashGraphResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCroHashGraphResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCroHashGraphResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerticesHashes) > 0 {
		for iNdEx := len(m.VerticesHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VerticesHashes[iNdEx])
			copy(dAtA[i:], m.VerticesHashes[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.VerticesHashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscribeCroRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CroId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *SubscribeCroResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnCode != 0 {
		n += 1 + sovRpc(uint64(m.ReturnCode))
	}
	return n
}

func (m *UnsubscribeCroRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CroId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *UnsubscribeCroResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnCode != 0 {
		n += 1 + sovRpc(uint64(m.ReturnCode))
	}
	return n
}

func (m *GetCroHashGraphRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CroId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *GetCroHashGraphResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VerticesHashes) > 0 {
		for _, s := range m.VerticesHashes {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeCroRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeCroRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeCroRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CroId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CroId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeCroResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeCroResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeCroResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscribeCroRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscribeCroRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscribeCroRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CroId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CroId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscribeCroResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscribeCroResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscribeCroResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCroHashGraphRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCroHashGraphRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCroHashGraphRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CroId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CroId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCroHashGraphResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCroHashGraphResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCroHashGraphResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerticesHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerticesHashes = append(m.VerticesHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
