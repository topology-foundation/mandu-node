// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mandu/subscription/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QuerySubscriptionRequestRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySubscriptionRequestRequest) Reset()         { *m = QuerySubscriptionRequestRequest{} }
func (m *QuerySubscriptionRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequestRequest) ProtoMessage()    {}
func (*QuerySubscriptionRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{2}
}
func (m *QuerySubscriptionRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequestRequest.Merge(m, src)
}
func (m *QuerySubscriptionRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequestRequest proto.InternalMessageInfo

func (m *QuerySubscriptionRequestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QuerySubscriptionRequestResponse struct {
	SubscriptionRequest SubscriptionRequest `protobuf:"bytes,1,opt,name=subscription_request,json=subscriptionRequest,proto3" json:"subscription_request"`
}

func (m *QuerySubscriptionRequestResponse) Reset()         { *m = QuerySubscriptionRequestResponse{} }
func (m *QuerySubscriptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequestResponse) ProtoMessage()    {}
func (*QuerySubscriptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{3}
}
func (m *QuerySubscriptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequestResponse.Merge(m, src)
}
func (m *QuerySubscriptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequestResponse proto.InternalMessageInfo

func (m *QuerySubscriptionRequestResponse) GetSubscriptionRequest() SubscriptionRequest {
	if m != nil {
		return m.SubscriptionRequest
	}
	return SubscriptionRequest{}
}

type QuerySubscriptionRequestStatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySubscriptionRequestStatusRequest) Reset()         { *m = QuerySubscriptionRequestStatusRequest{} }
func (m *QuerySubscriptionRequestStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequestStatusRequest) ProtoMessage()    {}
func (*QuerySubscriptionRequestStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{4}
}
func (m *QuerySubscriptionRequestStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequestStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequestStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequestStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequestStatusRequest.Merge(m, src)
}
func (m *QuerySubscriptionRequestStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequestStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequestStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequestStatusRequest proto.InternalMessageInfo

func (m *QuerySubscriptionRequestStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QuerySubscriptionRequestStatusResponse struct {
	Status SubscriptionRequest_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mandu.subscription.SubscriptionRequest_Status" json:"status,omitempty"`
}

func (m *QuerySubscriptionRequestStatusResponse) Reset() {
	*m = QuerySubscriptionRequestStatusResponse{}
}
func (m *QuerySubscriptionRequestStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequestStatusResponse) ProtoMessage()    {}
func (*QuerySubscriptionRequestStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{5}
}
func (m *QuerySubscriptionRequestStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequestStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequestStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequestStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequestStatusResponse.Merge(m, src)
}
func (m *QuerySubscriptionRequestStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequestStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequestStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequestStatusResponse proto.InternalMessageInfo

func (m *QuerySubscriptionRequestStatusResponse) GetStatus() SubscriptionRequest_Status {
	if m != nil {
		return m.Status
	}
	return SubscriptionRequest_UNDEFINED
}

type QuerySubscriptionRequestsRequest struct {
	Requester  string             `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubscriptionRequestsRequest) Reset()         { *m = QuerySubscriptionRequestsRequest{} }
func (m *QuerySubscriptionRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequestsRequest) ProtoMessage()    {}
func (*QuerySubscriptionRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{6}
}
func (m *QuerySubscriptionRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequestsRequest.Merge(m, src)
}
func (m *QuerySubscriptionRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequestsRequest proto.InternalMessageInfo

func (m *QuerySubscriptionRequestsRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *QuerySubscriptionRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySubscriptionRequestsResponse struct {
	SubscriptionRequests []SubscriptionRequest `protobuf:"bytes,1,rep,name=subscription_requests,json=subscriptionRequests,proto3" json:"subscription_requests"`
	Pagination           *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubscriptionRequestsResponse) Reset()         { *m = QuerySubscriptionRequestsResponse{} }
func (m *QuerySubscriptionRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequestsResponse) ProtoMessage()    {}
func (*QuerySubscriptionRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{7}
}
func (m *QuerySubscriptionRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequestsResponse.Merge(m, src)
}
func (m *QuerySubscriptionRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequestsResponse proto.InternalMessageInfo

func (m *QuerySubscriptionRequestsResponse) GetSubscriptionRequests() []SubscriptionRequest {
	if m != nil {
		return m.SubscriptionRequests
	}
	return nil
}

func (m *QuerySubscriptionRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySubscriptionRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySubscriptionRequest) Reset()         { *m = QuerySubscriptionRequest{} }
func (m *QuerySubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequest) ProtoMessage()    {}
func (*QuerySubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{8}
}
func (m *QuerySubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequest.Merge(m, src)
}
func (m *QuerySubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequest proto.InternalMessageInfo

func (m *QuerySubscriptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QuerySubscriptionResponse struct {
	Subscription Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription"`
}

func (m *QuerySubscriptionResponse) Reset()         { *m = QuerySubscriptionResponse{} }
func (m *QuerySubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionResponse) ProtoMessage()    {}
func (*QuerySubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{9}
}
func (m *QuerySubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionResponse.Merge(m, src)
}
func (m *QuerySubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionResponse proto.InternalMessageInfo

func (m *QuerySubscriptionResponse) GetSubscription() Subscription {
	if m != nil {
		return m.Subscription
	}
	return Subscription{}
}

type QuerySubscriptionsRequest struct {
	Subscriber string             `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubscriptionsRequest) Reset()         { *m = QuerySubscriptionsRequest{} }
func (m *QuerySubscriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionsRequest) ProtoMessage()    {}
func (*QuerySubscriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{10}
}
func (m *QuerySubscriptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionsRequest.Merge(m, src)
}
func (m *QuerySubscriptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionsRequest proto.InternalMessageInfo

func (m *QuerySubscriptionsRequest) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *QuerySubscriptionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySubscriptionsResponse struct {
	Subscriptions []Subscription      `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubscriptionsResponse) Reset()         { *m = QuerySubscriptionsResponse{} }
func (m *QuerySubscriptionsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionsResponse) ProtoMessage()    {}
func (*QuerySubscriptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29ef7c6d8b9f82c5, []int{11}
}
func (m *QuerySubscriptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionsResponse.Merge(m, src)
}
func (m *QuerySubscriptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionsResponse proto.InternalMessageInfo

func (m *QuerySubscriptionsResponse) GetSubscriptions() []Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *QuerySubscriptionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mandu.subscription.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mandu.subscription.QueryParamsResponse")
	proto.RegisterType((*QuerySubscriptionRequestRequest)(nil), "mandu.subscription.QuerySubscriptionRequestRequest")
	proto.RegisterType((*QuerySubscriptionRequestResponse)(nil), "mandu.subscription.QuerySubscriptionRequestResponse")
	proto.RegisterType((*QuerySubscriptionRequestStatusRequest)(nil), "mandu.subscription.QuerySubscriptionRequestStatusRequest")
	proto.RegisterType((*QuerySubscriptionRequestStatusResponse)(nil), "mandu.subscription.QuerySubscriptionRequestStatusResponse")
	proto.RegisterType((*QuerySubscriptionRequestsRequest)(nil), "mandu.subscription.QuerySubscriptionRequestsRequest")
	proto.RegisterType((*QuerySubscriptionRequestsResponse)(nil), "mandu.subscription.QuerySubscriptionRequestsResponse")
	proto.RegisterType((*QuerySubscriptionRequest)(nil), "mandu.subscription.QuerySubscriptionRequest")
	proto.RegisterType((*QuerySubscriptionResponse)(nil), "mandu.subscription.QuerySubscriptionResponse")
	proto.RegisterType((*QuerySubscriptionsRequest)(nil), "mandu.subscription.QuerySubscriptionsRequest")
	proto.RegisterType((*QuerySubscriptionsResponse)(nil), "mandu.subscription.QuerySubscriptionsResponse")
}

func init() { proto.RegisterFile("mandu/subscription/query.proto", fileDescriptor_29ef7c6d8b9f82c5) }

var fileDescriptor_29ef7c6d8b9f82c5 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x51, 0x83, 0x7d, 0xb6, 0x05, 0xa7, 0x11, 0xda, 0xa5, 0x6c, 0xeb, 0x42, 0x1b,
	0x29, 0x76, 0xc7, 0xfe, 0x46, 0xb1, 0x97, 0x1e, 0x2a, 0x88, 0x87, 0x9a, 0x7a, 0xf2, 0x52, 0x37,
	0xcd, 0xb2, 0x2c, 0x98, 0x9d, 0x6d, 0x66, 0x23, 0x96, 0x92, 0x8b, 0x7a, 0xf0, 0x28, 0x78, 0xf3,
	0xe0, 0x51, 0x3c, 0x0a, 0x1e, 0xbc, 0x7b, 0xea, 0x31, 0xe0, 0xc5, 0x93, 0x48, 0x2b, 0xf8, 0x6f,
	0x48, 0x66, 0x5e, 0xd2, 0x5d, 0x32, 0xdb, 0xdd, 0x48, 0x2f, 0xed, 0x66, 0xe6, 0x7d, 0xdf, 0x7c,
	0xbe, 0xef, 0xcd, 0xbe, 0x04, 0xcc, 0x86, 0x13, 0xd4, 0x5b, 0x4c, 0xb4, 0x6a, 0x62, 0xbf, 0xe9,
	0x87, 0x91, 0xcf, 0x03, 0x76, 0xd0, 0x72, 0x9b, 0x87, 0x76, 0xd8, 0xe4, 0x11, 0xa7, 0x54, 0xee,
	0xdb, 0xf1, 0x7d, 0xe3, 0xba, 0xd3, 0xf0, 0x03, 0xce, 0xe4, 0x5f, 0x15, 0x66, 0x2c, 0xec, 0x73,
	0xd1, 0xe0, 0x82, 0xd5, 0x1c, 0xe1, 0x2a, 0x3d, 0x7b, 0xb1, 0x54, 0x73, 0x23, 0x67, 0x89, 0x85,
	0x8e, 0xe7, 0x07, 0x4e, 0x57, 0x88, 0xb1, 0x65, 0x8f, 0x7b, 0x5c, 0x3e, 0xb2, 0xee, 0x13, 0xae,
	0x4e, 0x7b, 0x9c, 0x7b, 0xcf, 0x5d, 0xe6, 0x84, 0x3e, 0x73, 0x82, 0x80, 0x47, 0x52, 0x22, 0x70,
	0x77, 0x46, 0x83, 0x19, 0x3a, 0x4d, 0xa7, 0xd1, 0x0b, 0x98, 0xd3, 0x04, 0xc4, 0x3f, 0xa8, 0x30,
	0xab, 0x0c, 0xf4, 0x71, 0x97, 0x6e, 0x47, 0x6a, 0xab, 0xee, 0x41, 0xcb, 0x15, 0x91, 0xf5, 0x04,
	0x26, 0x12, 0xab, 0x22, 0xe4, 0x81, 0x70, 0xe9, 0x26, 0x94, 0xd4, 0x19, 0x93, 0x64, 0x96, 0xdc,
	0xba, 0xb6, 0x6c, 0xd8, 0x83, 0xc5, 0xb0, 0x95, 0x66, 0x6b, 0xe4, 0xf8, 0xd7, 0x4c, 0xe1, 0xf3,
	0xdf, 0x2f, 0x0b, 0xa4, 0x8a, 0x22, 0x6b, 0x09, 0x66, 0x64, 0xd6, 0xdd, 0x58, 0x38, 0x9e, 0x88,
	0xff, 0xe8, 0x38, 0x14, 0xfd, 0xba, 0xcc, 0x3e, 0x52, 0x2d, 0xfa, 0x75, 0xeb, 0x0d, 0x81, 0xd9,
	0x74, 0x0d, 0x62, 0x3d, 0x83, 0x72, 0x9c, 0x60, 0xaf, 0xa9, 0xf6, 0x11, 0xb2, 0xa2, 0x83, 0xd4,
	0xa4, 0xdb, 0xba, 0xdc, 0x25, 0xae, 0x4e, 0x88, 0xc1, 0x2d, 0x6b, 0x03, 0xe6, 0xd2, 0x28, 0x76,
	0x23, 0x27, 0x6a, 0x89, 0x34, 0xfe, 0x10, 0xe6, 0xb3, 0x84, 0x68, 0x62, 0x1b, 0x4a, 0x42, 0xae,
	0x48, 0xf5, 0xf8, 0xb2, 0x9d, 0x13, 0xdb, 0xc6, 0x3c, 0xa8, 0xb6, 0xde, 0x9e, 0x53, 0xb1, 0x3e,
	0xe6, 0x34, 0x8c, 0x60, 0x91, 0xdc, 0x26, 0xd2, 0x9e, 0x2d, 0xd0, 0x6d, 0x80, 0xb3, 0x3b, 0x3a,
	0x59, 0x94, 0x55, 0x9c, 0xb7, 0xd5, 0x85, 0xb6, 0xbb, 0x17, 0xda, 0x56, 0x2f, 0x04, 0x5e, 0x68,
	0x7b, 0xc7, 0xf1, 0xdc, 0x5e, 0x4f, 0x62, 0x4a, 0xab, 0x43, 0xe0, 0xe6, 0x39, 0x28, 0x68, 0xbc,
	0x06, 0x37, 0x74, 0xdd, 0xeb, 0xd6, 0xe1, 0xd2, 0xf0, 0xed, 0x2b, 0x6b, 0xda, 0x27, 0xe8, 0x03,
	0x8d, 0xa3, 0x4a, 0xa6, 0x23, 0x05, 0x98, 0xb0, 0xb4, 0x00, 0x93, 0x69, 0x8e, 0x06, 0x7a, 0xef,
	0xc1, 0x94, 0x26, 0x16, 0x5d, 0x3f, 0x84, 0xd1, 0x38, 0x29, 0xde, 0xd5, 0xd9, 0x2c, 0xb3, 0xe8,
	0x32, 0xa1, 0xb5, 0x5e, 0x13, 0xcd, 0x49, 0xfd, 0x5e, 0x9b, 0x00, 0x18, 0x5d, 0xeb, 0x37, 0x3b,
	0xb6, 0x72, 0x61, 0xdd, 0xfe, 0x4a, 0xc0, 0xd0, 0x51, 0xa0, 0xe1, 0x47, 0x30, 0x16, 0x87, 0xee,
	0xb5, 0x37, 0xaf, 0xe3, 0xa4, 0xf8, 0xc2, 0x1a, 0xba, 0xfc, 0xf1, 0x2a, 0x5c, 0x91, 0xd4, 0xb4,
	0x0d, 0x25, 0x35, 0xba, 0xe8, 0xbc, 0x8e, 0x69, 0x70, 0x4a, 0x1a, 0x95, 0xcc, 0x38, 0x75, 0xa0,
	0x65, 0xbd, 0xfa, 0xf1, 0xe7, 0x7d, 0x71, 0x9a, 0x1a, 0x2c, 0x75, 0x6a, 0xd3, 0x6f, 0x04, 0x26,
	0x74, 0xb7, 0x6a, 0x25, 0xf5, 0x90, 0xf4, 0x31, 0x6a, 0xac, 0x0e, 0x27, 0x42, 0xcc, 0x35, 0x89,
	0xc9, 0xe8, 0x22, 0xcb, 0xf8, 0xee, 0xe8, 0xbd, 0xa3, 0xec, 0xc8, 0xaf, 0xb7, 0x69, 0x87, 0xc0,
	0x54, 0xea, 0x7c, 0xa3, 0x77, 0x87, 0x41, 0x49, 0x0c, 0x53, 0xe3, 0xde, 0xff, 0x48, 0xd1, 0xcb,
	0x7d, 0xe9, 0x65, 0x9d, 0xae, 0xe6, 0xf5, 0xb2, 0xa7, 0xe6, 0xa7, 0xb2, 0xf4, 0x9d, 0x40, 0x59,
	0x37, 0xb4, 0xe8, 0x50, 0x85, 0xed, 0x1b, 0x59, 0x1b, 0x52, 0x85, 0x1e, 0x36, 0xa5, 0x87, 0x0d,
	0xba, 0x96, 0xd7, 0x83, 0x60, 0x47, 0xfd, 0x29, 0xde, 0xa6, 0x1f, 0x08, 0x8c, 0xc6, 0xf3, 0xd3,
	0xdb, 0xc3, 0x60, 0x18, 0x8b, 0x39, 0xa3, 0x11, 0x76, 0x51, 0xc2, 0x56, 0xe8, 0x5c, 0x16, 0xac,
	0xaa, 0xf0, 0x27, 0x02, 0x63, 0x89, 0x41, 0x41, 0xf3, 0x9d, 0xd7, 0xaf, 0xa9, 0x9d, 0x37, 0x1c,
	0xf9, 0xd6, 0x25, 0xdf, 0x1d, 0x6a, 0x67, 0xf1, 0x09, 0x76, 0x74, 0x36, 0x1d, 0xdb, 0x5b, 0xab,
	0xc7, 0x27, 0x26, 0xe9, 0x9c, 0x98, 0xe4, 0xf7, 0x89, 0x49, 0xde, 0x9d, 0x9a, 0x85, 0xce, 0xa9,
	0x59, 0xf8, 0x79, 0x6a, 0x16, 0x9e, 0x1a, 0x2a, 0xd1, 0xcb, 0x64, 0xaa, 0xe8, 0x30, 0x74, 0x45,
	0xad, 0x24, 0x7f, 0x5d, 0xad, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xde, 0x11, 0x64, 0x4e,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	SubscriptionRequest(ctx context.Context, in *QuerySubscriptionRequestRequest, opts ...grpc.CallOption) (*QuerySubscriptionRequestResponse, error)
	SubscriptionRequestStatus(ctx context.Context, in *QuerySubscriptionRequestStatusRequest, opts ...grpc.CallOption) (*QuerySubscriptionRequestStatusResponse, error)
	SubscriptionRequests(ctx context.Context, in *QuerySubscriptionRequestsRequest, opts ...grpc.CallOption) (*QuerySubscriptionRequestsResponse, error)
	Subscription(ctx context.Context, in *QuerySubscriptionRequest, opts ...grpc.CallOption) (*QuerySubscriptionResponse, error)
	Subscriptions(ctx context.Context, in *QuerySubscriptionsRequest, opts ...grpc.CallOption) (*QuerySubscriptionsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubscriptionRequest(ctx context.Context, in *QuerySubscriptionRequestRequest, opts ...grpc.CallOption) (*QuerySubscriptionRequestResponse, error) {
	out := new(QuerySubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Query/SubscriptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubscriptionRequestStatus(ctx context.Context, in *QuerySubscriptionRequestStatusRequest, opts ...grpc.CallOption) (*QuerySubscriptionRequestStatusResponse, error) {
	out := new(QuerySubscriptionRequestStatusResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Query/SubscriptionRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubscriptionRequests(ctx context.Context, in *QuerySubscriptionRequestsRequest, opts ...grpc.CallOption) (*QuerySubscriptionRequestsResponse, error) {
	out := new(QuerySubscriptionRequestsResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Query/SubscriptionRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subscription(ctx context.Context, in *QuerySubscriptionRequest, opts ...grpc.CallOption) (*QuerySubscriptionResponse, error) {
	out := new(QuerySubscriptionResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Query/Subscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subscriptions(ctx context.Context, in *QuerySubscriptionsRequest, opts ...grpc.CallOption) (*QuerySubscriptionsResponse, error) {
	out := new(QuerySubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Query/Subscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	SubscriptionRequest(context.Context, *QuerySubscriptionRequestRequest) (*QuerySubscriptionRequestResponse, error)
	SubscriptionRequestStatus(context.Context, *QuerySubscriptionRequestStatusRequest) (*QuerySubscriptionRequestStatusResponse, error)
	SubscriptionRequests(context.Context, *QuerySubscriptionRequestsRequest) (*QuerySubscriptionRequestsResponse, error)
	Subscription(context.Context, *QuerySubscriptionRequest) (*QuerySubscriptionResponse, error)
	Subscriptions(context.Context, *QuerySubscriptionsRequest) (*QuerySubscriptionsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SubscriptionRequest(ctx context.Context, req *QuerySubscriptionRequestRequest) (*QuerySubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriptionRequest not implemented")
}
func (*UnimplementedQueryServer) SubscriptionRequestStatus(ctx context.Context, req *QuerySubscriptionRequestStatusRequest) (*QuerySubscriptionRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriptionRequestStatus not implemented")
}
func (*UnimplementedQueryServer) SubscriptionRequests(ctx context.Context, req *QuerySubscriptionRequestsRequest) (*QuerySubscriptionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriptionRequests not implemented")
}
func (*UnimplementedQueryServer) Subscription(ctx context.Context, req *QuerySubscriptionRequest) (*QuerySubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}
func (*UnimplementedQueryServer) Subscriptions(ctx context.Context, req *QuerySubscriptionsRequest) (*QuerySubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscriptions not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Query/SubscriptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubscriptionRequest(ctx, req.(*QuerySubscriptionRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubscriptionRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubscriptionRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Query/SubscriptionRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubscriptionRequestStatus(ctx, req.(*QuerySubscriptionRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubscriptionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubscriptionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Query/SubscriptionRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubscriptionRequests(ctx, req.(*QuerySubscriptionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Query/Subscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subscription(ctx, req.(*QuerySubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Query/Subscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subscriptions(ctx, req.(*QuerySubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mandu.subscription.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SubscriptionRequest",
			Handler:    _Query_SubscriptionRequest_Handler,
		},
		{
			MethodName: "SubscriptionRequestStatus",
			Handler:    _Query_SubscriptionRequestStatus_Handler,
		},
		{
			MethodName: "SubscriptionRequests",
			Handler:    _Query_SubscriptionRequests_Handler,
		},
		{
			MethodName: "Subscription",
			Handler:    _Query_Subscription_Handler,
		},
		{
			MethodName: "Subscriptions",
			Handler:    _Query_Subscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mandu/subscription/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SubscriptionRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequestStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequestStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequestStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequestStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequestStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequestStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscriptionRequests) > 0 {
		for iNdEx := len(m.SubscriptionRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubscriptionRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Subscription.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubscriptionRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SubscriptionRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubscriptionRequestStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionRequestStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QuerySubscriptionRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubscriptionRequests) > 0 {
		for _, e := range m.SubscriptionRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Subscription.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubscriptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubscriptionRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequestStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequestStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequestStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequestStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequestStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequestStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SubscriptionRequest_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequests = append(m.SubscriptionRequests, SubscriptionRequest{})
			if err := m.SubscriptionRequests[len(m.SubscriptionRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, Subscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
