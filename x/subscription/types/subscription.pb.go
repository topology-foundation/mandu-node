// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mandu/subscription/subscription.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionRequest_Status int32

const (
	SubscriptionRequest_UNDEFINED   SubscriptionRequest_Status = 0
	SubscriptionRequest_SCHEDULED   SubscriptionRequest_Status = 1
	SubscriptionRequest_INITIALIZED SubscriptionRequest_Status = 2
	SubscriptionRequest_ACTIVE      SubscriptionRequest_Status = 3
	SubscriptionRequest_INACTIVE    SubscriptionRequest_Status = 4
	SubscriptionRequest_CANCELLED   SubscriptionRequest_Status = 5
	SubscriptionRequest_EXPIRED     SubscriptionRequest_Status = 6
)

var SubscriptionRequest_Status_name = map[int32]string{
	0: "UNDEFINED",
	1: "SCHEDULED",
	2: "INITIALIZED",
	3: "ACTIVE",
	4: "INACTIVE",
	5: "CANCELLED",
	6: "EXPIRED",
}

var SubscriptionRequest_Status_value = map[string]int32{
	"UNDEFINED":   0,
	"SCHEDULED":   1,
	"INITIALIZED": 2,
	"ACTIVE":      3,
	"INACTIVE":    4,
	"CANCELLED":   5,
	"EXPIRED":     6,
}

func (x SubscriptionRequest_Status) String() string {
	return proto.EnumName(SubscriptionRequest_Status_name, int32(x))
}

func (SubscriptionRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dc32f56bcaac3eb, []int{0, 0}
}

type SubscriptionRequest struct {
	Id              string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Requester       string                     `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Status          SubscriptionRequest_Status `protobuf:"varint,3,opt,name=status,proto3,enum=mandu.subscription.SubscriptionRequest_Status" json:"status,omitempty"`
	TotalAmount     int64                      `protobuf:"varint,4,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	AvailableAmount int64                      `protobuf:"varint,5,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	StartBlock      int64                      `protobuf:"varint,6,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EpochSize       int64                      `protobuf:"varint,7,opt,name=epoch_size,json=epochSize,proto3" json:"epoch_size,omitempty"`
	Duration        int64                      `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	StartEpoch      int64                      `protobuf:"varint,9,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	EndEpoch        int64                      `protobuf:"varint,10,opt,name=end_epoch,json=endEpoch,proto3" json:"end_epoch,omitempty"`
	DrpIds          []string                   `protobuf:"bytes,11,rep,name=drp_ids,json=drpIds,proto3" json:"drp_ids,omitempty"`
	Writers         []string                   `protobuf:"bytes,12,rep,name=writers,proto3" json:"writers,omitempty"`
	InitialFrontier []string                   `protobuf:"bytes,13,rep,name=initial_frontier,json=initialFrontier,proto3" json:"initial_frontier,omitempty"`
	SubscriptionIds []string                   `protobuf:"bytes,14,rep,name=subscription_ids,json=subscriptionIds,proto3" json:"subscription_ids,omitempty"`
}

func (m *SubscriptionRequest) Reset()         { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()    {}
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc32f56bcaac3eb, []int{0}
}
func (m *SubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionRequest.Merge(m, src)
}
func (m *SubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionRequest proto.InternalMessageInfo

func (m *SubscriptionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubscriptionRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *SubscriptionRequest) GetStatus() SubscriptionRequest_Status {
	if m != nil {
		return m.Status
	}
	return SubscriptionRequest_UNDEFINED
}

func (m *SubscriptionRequest) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *SubscriptionRequest) GetAvailableAmount() int64 {
	if m != nil {
		return m.AvailableAmount
	}
	return 0
}

func (m *SubscriptionRequest) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *SubscriptionRequest) GetEpochSize() int64 {
	if m != nil {
		return m.EpochSize
	}
	return 0
}

func (m *SubscriptionRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SubscriptionRequest) GetStartEpoch() int64 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *SubscriptionRequest) GetEndEpoch() int64 {
	if m != nil {
		return m.EndEpoch
	}
	return 0
}

func (m *SubscriptionRequest) GetDrpIds() []string {
	if m != nil {
		return m.DrpIds
	}
	return nil
}

func (m *SubscriptionRequest) GetWriters() []string {
	if m != nil {
		return m.Writers
	}
	return nil
}

func (m *SubscriptionRequest) GetInitialFrontier() []string {
	if m != nil {
		return m.InitialFrontier
	}
	return nil
}

func (m *SubscriptionRequest) GetSubscriptionIds() []string {
	if m != nil {
		return m.SubscriptionIds
	}
	return nil
}

type Subscription struct {
	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscriptionRequestId string `protobuf:"bytes,2,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
	Subscriber            string `protobuf:"bytes,3,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	StartEpoch            int64  `protobuf:"varint,4,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	EndEpoch              int64  `protobuf:"varint,5,opt,name=end_epoch,json=endEpoch,proto3" json:"end_epoch,omitempty"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc32f56bcaac3eb, []int{1}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subscription) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

func (m *Subscription) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *Subscription) GetStartEpoch() int64 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *Subscription) GetEndEpoch() int64 {
	if m != nil {
		return m.EndEpoch
	}
	return 0
}

func init() {
	proto.RegisterEnum("mandu.subscription.SubscriptionRequest_Status", SubscriptionRequest_Status_name, SubscriptionRequest_Status_value)
	proto.RegisterType((*SubscriptionRequest)(nil), "mandu.subscription.SubscriptionRequest")
	proto.RegisterType((*Subscription)(nil), "mandu.subscription.Subscription")
}

func init() {
	proto.RegisterFile("mandu/subscription/subscription.proto", fileDescriptor_0dc32f56bcaac3eb)
}

var fileDescriptor_0dc32f56bcaac3eb = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x9b, 0xb6, 0x4b, 0x97, 0xd3, 0xae, 0x8d, 0x8c, 0xd0, 0xac, 0x01, 0xa1, 0x54, 0x42,
	0x2a, 0x37, 0x41, 0x02, 0xc4, 0x7d, 0xd7, 0xa4, 0xc2, 0x52, 0x55, 0xa1, 0x74, 0x43, 0x68, 0x37,
	0x51, 0x5a, 0x1b, 0x61, 0xd1, 0x26, 0xc1, 0x76, 0xf8, 0xb3, 0xa7, 0xe0, 0x61, 0x78, 0x08, 0x2e,
	0x77, 0xc9, 0x25, 0x6a, 0x2f, 0x79, 0x09, 0x14, 0x27, 0xdb, 0x52, 0x8a, 0xb8, 0x3c, 0xbf, 0xef,
	0x3b, 0xb6, 0x93, 0xf3, 0x1d, 0x78, 0xbc, 0x8e, 0x62, 0x9a, 0x3d, 0x95, 0xd9, 0x42, 0x2e, 0x05,
	0x4f, 0x15, 0x4f, 0xe2, 0x9d, 0xc2, 0x4d, 0x45, 0xa2, 0x12, 0x84, 0xb4, 0xcd, 0xad, 0x2a, 0x83,
	0xdf, 0x4d, 0xb8, 0x33, 0xaf, 0x80, 0x80, 0x7d, 0xcc, 0x98, 0x54, 0xa8, 0x0b, 0x75, 0x4e, 0xb1,
	0xd1, 0x37, 0x86, 0x56, 0x50, 0xe7, 0x14, 0xdd, 0x07, 0x4b, 0x14, 0x12, 0x13, 0xb8, 0xae, 0xf1,
	0x2d, 0x40, 0x13, 0x30, 0xa5, 0x8a, 0x54, 0x26, 0x71, 0xa3, 0x6f, 0x0c, 0xbb, 0xcf, 0x5c, 0x77,
	0xff, 0x2a, 0xf7, 0x1f, 0xd7, 0xb8, 0x73, 0xdd, 0x15, 0x94, 0xdd, 0xe8, 0x11, 0x74, 0x54, 0xa2,
	0xa2, 0x55, 0x18, 0xad, 0x93, 0x2c, 0x56, 0xb8, 0xd9, 0x37, 0x86, 0x8d, 0xa0, 0xad, 0xd9, 0x48,
	0x23, 0xf4, 0x04, 0xec, 0xe8, 0x53, 0xc4, 0x57, 0xd1, 0x62, 0xc5, 0xae, 0x6d, 0x07, 0xda, 0xd6,
	0xbb, 0xe1, 0xa5, 0xf5, 0x21, 0xb4, 0xa5, 0x8a, 0x84, 0x0a, 0x17, 0xab, 0x64, 0xf9, 0x01, 0x9b,
	0xda, 0x05, 0x1a, 0x9d, 0xe6, 0x04, 0x3d, 0x00, 0x60, 0x69, 0xb2, 0x7c, 0x1f, 0x4a, 0x7e, 0xc9,
	0x70, 0x4b, 0xeb, 0x96, 0x26, 0x73, 0x7e, 0xc9, 0xd0, 0x09, 0x1c, 0xd2, 0x4c, 0x44, 0xf9, 0x7b,
	0xf1, 0xa1, 0x16, 0x6f, 0xea, 0xdb, 0xb3, 0xb5, 0x1d, 0x5b, 0x95, 0xb3, 0xfd, 0x9c, 0xa0, 0x7b,
	0x60, 0xb1, 0x98, 0x96, 0x32, 0x14, 0xdd, 0x2c, 0xa6, 0x85, 0x78, 0x0c, 0x2d, 0x2a, 0xd2, 0x90,
	0x53, 0x89, 0xdb, 0xfd, 0xc6, 0xd0, 0x0a, 0x4c, 0x2a, 0x52, 0x42, 0x25, 0xc2, 0xd0, 0xfa, 0x2c,
	0xb8, 0x62, 0x42, 0xe2, 0x8e, 0x16, 0xae, 0xcb, 0xfc, 0xbb, 0x79, 0xcc, 0x15, 0x8f, 0x56, 0xe1,
	0x3b, 0x91, 0xc4, 0x8a, 0x33, 0x81, 0x8f, 0xb4, 0xa5, 0x57, 0xf2, 0x49, 0x89, 0x73, 0x6b, 0xf5,
	0xc7, 0xeb, 0x6b, 0xba, 0x85, 0xb5, 0xca, 0x09, 0x95, 0x83, 0x35, 0x98, 0xc5, 0x08, 0xd0, 0x11,
	0x58, 0xe7, 0x33, 0xcf, 0x9f, 0x90, 0x99, 0xef, 0xd9, 0xb5, 0xbc, 0x9c, 0x8f, 0x5f, 0xf9, 0xde,
	0xf9, 0xd4, 0xf7, 0x6c, 0x03, 0xf5, 0xa0, 0x4d, 0x66, 0xe4, 0x8c, 0x8c, 0xa6, 0xe4, 0xc2, 0xf7,
	0xec, 0x3a, 0x02, 0x30, 0x47, 0xe3, 0x33, 0xf2, 0xc6, 0xb7, 0x1b, 0xa8, 0x03, 0x87, 0x64, 0x56,
	0x56, 0xcd, 0xbc, 0x73, 0x3c, 0x9a, 0x8d, 0xfd, 0x69, 0xde, 0x79, 0x80, 0xda, 0xd0, 0xf2, 0xdf,
	0xbe, 0x26, 0x81, 0xef, 0xd9, 0xe6, 0xe0, 0xbb, 0x01, 0x9d, 0x6a, 0x0c, 0xf6, 0x62, 0xf6, 0x12,
	0x8e, 0x77, 0x9e, 0x5e, 0x46, 0x2c, 0xe4, 0xb4, 0x0c, 0xdd, 0x5d, 0xb9, 0x9f, 0x22, 0x42, 0x91,
	0x03, 0x50, 0x0a, 0x0b, 0x26, 0x74, 0x08, 0xad, 0xa0, 0x42, 0xfe, 0x1e, 0x57, 0xf3, 0xff, 0xe3,
	0x3a, 0xd8, 0x1d, 0xd7, 0xe9, 0x8b, 0x1f, 0x1b, 0xc7, 0xb8, 0xda, 0x38, 0xc6, 0xaf, 0x8d, 0x63,
	0x7c, 0xdb, 0x3a, 0xb5, 0xab, 0xad, 0x53, 0xfb, 0xb9, 0x75, 0x6a, 0x17, 0x27, 0xc5, 0xe6, 0x7d,
	0xd9, 0xdd, 0x3d, 0xf5, 0x35, 0x65, 0x72, 0x61, 0xea, 0xad, 0x7b, 0xfe, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0x31, 0x27, 0x1a, 0x9e, 0x03, 0x00, 0x00,
}

func (m *SubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionIds) > 0 {
		for iNdEx := len(m.SubscriptionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubscriptionIds[iNdEx])
			copy(dAtA[i:], m.SubscriptionIds[iNdEx])
			i = encodeVarintSubscription(dAtA, i, uint64(len(m.SubscriptionIds[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.InitialFrontier) > 0 {
		for iNdEx := len(m.InitialFrontier) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitialFrontier[iNdEx])
			copy(dAtA[i:], m.InitialFrontier[iNdEx])
			i = encodeVarintSubscription(dAtA, i, uint64(len(m.InitialFrontier[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Writers) > 0 {
		for iNdEx := len(m.Writers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Writers[iNdEx])
			copy(dAtA[i:], m.Writers[iNdEx])
			i = encodeVarintSubscription(dAtA, i, uint64(len(m.Writers[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.DrpIds) > 0 {
		for iNdEx := len(m.DrpIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DrpIds[iNdEx])
			copy(dAtA[i:], m.DrpIds[iNdEx])
			i = encodeVarintSubscription(dAtA, i, uint64(len(m.DrpIds[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.EndEpoch != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.EndEpoch))
		i--
		dAtA[i] = 0x50
	}
	if m.StartEpoch != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.StartEpoch))
		i--
		dAtA[i] = 0x48
	}
	if m.Duration != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	if m.EpochSize != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.EpochSize))
		i--
		dAtA[i] = 0x38
	}
	if m.StartBlock != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x30
	}
	if m.AvailableAmount != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.AvailableAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalAmount != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.TotalAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndEpoch != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.EndEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.StartEpoch != 0 {
		i = encodeVarintSubscription(dAtA, i, uint64(m.StartEpoch))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSubscription(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubscription(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubscription(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSubscription(uint64(m.Status))
	}
	if m.TotalAmount != 0 {
		n += 1 + sovSubscription(uint64(m.TotalAmount))
	}
	if m.AvailableAmount != 0 {
		n += 1 + sovSubscription(uint64(m.AvailableAmount))
	}
	if m.StartBlock != 0 {
		n += 1 + sovSubscription(uint64(m.StartBlock))
	}
	if m.EpochSize != 0 {
		n += 1 + sovSubscription(uint64(m.EpochSize))
	}
	if m.Duration != 0 {
		n += 1 + sovSubscription(uint64(m.Duration))
	}
	if m.StartEpoch != 0 {
		n += 1 + sovSubscription(uint64(m.StartEpoch))
	}
	if m.EndEpoch != 0 {
		n += 1 + sovSubscription(uint64(m.EndEpoch))
	}
	if len(m.DrpIds) > 0 {
		for _, s := range m.DrpIds {
			l = len(s)
			n += 1 + l + sovSubscription(uint64(l))
		}
	}
	if len(m.Writers) > 0 {
		for _, s := range m.Writers {
			l = len(s)
			n += 1 + l + sovSubscription(uint64(l))
		}
	}
	if len(m.InitialFrontier) > 0 {
		for _, s := range m.InitialFrontier {
			l = len(s)
			n += 1 + l + sovSubscription(uint64(l))
		}
	}
	if len(m.SubscriptionIds) > 0 {
		for _, s := range m.SubscriptionIds {
			l = len(s)
			n += 1 + l + sovSubscription(uint64(l))
		}
	}
	return n
}

func (m *Subscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovSubscription(uint64(l))
	}
	if m.StartEpoch != 0 {
		n += 1 + sovSubscription(uint64(m.StartEpoch))
	}
	if m.EndEpoch != 0 {
		n += 1 + sovSubscription(uint64(m.EndEpoch))
	}
	return n
}

func sovSubscription(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubscription(x uint64) (n int) {
	return sovSubscription(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SubscriptionRequest_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			m.TotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableAmount", wireType)
			}
			m.AvailableAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochSize", wireType)
			}
			m.EpochSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpoch", wireType)
			}
			m.StartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpoch", wireType)
			}
			m.EndEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrpIds = append(m.DrpIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Writers = append(m.Writers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialFrontier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialFrontier = append(m.InitialFrontier, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionIds = append(m.SubscriptionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscription
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscription
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpoch", wireType)
			}
			m.StartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpoch", wireType)
			}
			m.EndEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscription(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubscription
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscription(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscription
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscription
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscription
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubscription
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubscription
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubscription        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscription          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubscription = fmt.Errorf("proto: unexpected end of group")
)
