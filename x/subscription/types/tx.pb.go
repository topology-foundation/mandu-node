// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mandu/subscription/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateSubscriptionRequest struct {
	Requester       string   `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	Amount          int64    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	StartBlock      int64    `protobuf:"varint,3,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EpochSize       int64    `protobuf:"varint,4,opt,name=epoch_size,json=epochSize,proto3" json:"epoch_size,omitempty"`
	Duration        int64    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	DrpIds          []string `protobuf:"bytes,6,rep,name=drp_ids,json=drpIds,proto3" json:"drp_ids,omitempty"`
	Writers         []string `protobuf:"bytes,7,rep,name=writers,proto3" json:"writers,omitempty"`
	InitialFrontier []string `protobuf:"bytes,8,rep,name=initial_frontier,json=initialFrontier,proto3" json:"initial_frontier,omitempty"`
}

func (m *MsgCreateSubscriptionRequest) Reset()         { *m = MsgCreateSubscriptionRequest{} }
func (m *MsgCreateSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubscriptionRequest) ProtoMessage()    {}
func (*MsgCreateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{2}
}
func (m *MsgCreateSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubscriptionRequest.Merge(m, src)
}
func (m *MsgCreateSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubscriptionRequest proto.InternalMessageInfo

func (m *MsgCreateSubscriptionRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *MsgCreateSubscriptionRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgCreateSubscriptionRequest) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *MsgCreateSubscriptionRequest) GetEpochSize() int64 {
	if m != nil {
		return m.EpochSize
	}
	return 0
}

func (m *MsgCreateSubscriptionRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgCreateSubscriptionRequest) GetDrpIds() []string {
	if m != nil {
		return m.DrpIds
	}
	return nil
}

func (m *MsgCreateSubscriptionRequest) GetWriters() []string {
	if m != nil {
		return m.Writers
	}
	return nil
}

func (m *MsgCreateSubscriptionRequest) GetInitialFrontier() []string {
	if m != nil {
		return m.InitialFrontier
	}
	return nil
}

type MsgCreateSubscriptionRequestResponse struct {
	SubscriptionRequestId string `protobuf:"bytes,1,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
}

func (m *MsgCreateSubscriptionRequestResponse) Reset()         { *m = MsgCreateSubscriptionRequestResponse{} }
func (m *MsgCreateSubscriptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubscriptionRequestResponse) ProtoMessage()    {}
func (*MsgCreateSubscriptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{3}
}
func (m *MsgCreateSubscriptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubscriptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubscriptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubscriptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubscriptionRequestResponse.Merge(m, src)
}
func (m *MsgCreateSubscriptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubscriptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubscriptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubscriptionRequestResponse proto.InternalMessageInfo

func (m *MsgCreateSubscriptionRequestResponse) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

type MsgCancelSubscriptionRequest struct {
	Requester             string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	SubscriptionRequestId string `protobuf:"bytes,2,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
}

func (m *MsgCancelSubscriptionRequest) Reset()         { *m = MsgCancelSubscriptionRequest{} }
func (m *MsgCancelSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSubscriptionRequest) ProtoMessage()    {}
func (*MsgCancelSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{4}
}
func (m *MsgCancelSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSubscriptionRequest.Merge(m, src)
}
func (m *MsgCancelSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSubscriptionRequest proto.InternalMessageInfo

func (m *MsgCancelSubscriptionRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *MsgCancelSubscriptionRequest) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

type MsgCancelSubscriptionRequestResponse struct {
}

func (m *MsgCancelSubscriptionRequestResponse) Reset()         { *m = MsgCancelSubscriptionRequestResponse{} }
func (m *MsgCancelSubscriptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSubscriptionRequestResponse) ProtoMessage()    {}
func (*MsgCancelSubscriptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{5}
}
func (m *MsgCancelSubscriptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSubscriptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSubscriptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSubscriptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSubscriptionRequestResponse.Merge(m, src)
}
func (m *MsgCancelSubscriptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSubscriptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSubscriptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSubscriptionRequestResponse proto.InternalMessageInfo

type MsgUpdateSubscriptionRequest struct {
	Requester             string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	SubscriptionRequestId string `protobuf:"bytes,2,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
	// these fields should be optional, errors with pulsar
	Amount     int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	StartBlock int64    `protobuf:"varint,4,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	Duration   int64    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Writers    []string `protobuf:"bytes,7,rep,name=writers,proto3" json:"writers,omitempty"`
}

func (m *MsgUpdateSubscriptionRequest) Reset()         { *m = MsgUpdateSubscriptionRequest{} }
func (m *MsgUpdateSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubscriptionRequest) ProtoMessage()    {}
func (*MsgUpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{6}
}
func (m *MsgUpdateSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubscriptionRequest.Merge(m, src)
}
func (m *MsgUpdateSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubscriptionRequest proto.InternalMessageInfo

func (m *MsgUpdateSubscriptionRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *MsgUpdateSubscriptionRequest) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

func (m *MsgUpdateSubscriptionRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgUpdateSubscriptionRequest) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *MsgUpdateSubscriptionRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgUpdateSubscriptionRequest) GetWriters() []string {
	if m != nil {
		return m.Writers
	}
	return nil
}

type MsgUpdateSubscriptionRequestResponse struct {
}

func (m *MsgUpdateSubscriptionRequestResponse) Reset()         { *m = MsgUpdateSubscriptionRequestResponse{} }
func (m *MsgUpdateSubscriptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubscriptionRequestResponse) ProtoMessage()    {}
func (*MsgUpdateSubscriptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{7}
}
func (m *MsgUpdateSubscriptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubscriptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubscriptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubscriptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubscriptionRequestResponse.Merge(m, src)
}
func (m *MsgUpdateSubscriptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubscriptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubscriptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubscriptionRequestResponse proto.InternalMessageInfo

type MsgIncrementSubscriptionRequestAmount struct {
	Requester             string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	SubscriptionRequestId string `protobuf:"bytes,2,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
	Amount                int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgIncrementSubscriptionRequestAmount) Reset()         { *m = MsgIncrementSubscriptionRequestAmount{} }
func (m *MsgIncrementSubscriptionRequestAmount) String() string { return proto.CompactTextString(m) }
func (*MsgIncrementSubscriptionRequestAmount) ProtoMessage()    {}
func (*MsgIncrementSubscriptionRequestAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{8}
}
func (m *MsgIncrementSubscriptionRequestAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncrementSubscriptionRequestAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncrementSubscriptionRequestAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncrementSubscriptionRequestAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncrementSubscriptionRequestAmount.Merge(m, src)
}
func (m *MsgIncrementSubscriptionRequestAmount) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncrementSubscriptionRequestAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncrementSubscriptionRequestAmount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncrementSubscriptionRequestAmount proto.InternalMessageInfo

func (m *MsgIncrementSubscriptionRequestAmount) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *MsgIncrementSubscriptionRequestAmount) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

func (m *MsgIncrementSubscriptionRequestAmount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type MsgIncrementSubscriptionRequestAmountResponse struct {
}

func (m *MsgIncrementSubscriptionRequestAmountResponse) Reset() {
	*m = MsgIncrementSubscriptionRequestAmountResponse{}
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgIncrementSubscriptionRequestAmountResponse) ProtoMessage() {}
func (*MsgIncrementSubscriptionRequestAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{9}
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncrementSubscriptionRequestAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncrementSubscriptionRequestAmountResponse.Merge(m, src)
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncrementSubscriptionRequestAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncrementSubscriptionRequestAmountResponse proto.InternalMessageInfo

type MsgJoinSubscriptionRequest struct {
	Subscriber            string `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	SubscriptionRequestId string `protobuf:"bytes,2,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
}

func (m *MsgJoinSubscriptionRequest) Reset()         { *m = MsgJoinSubscriptionRequest{} }
func (m *MsgJoinSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgJoinSubscriptionRequest) ProtoMessage()    {}
func (*MsgJoinSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{10}
}
func (m *MsgJoinSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinSubscriptionRequest.Merge(m, src)
}
func (m *MsgJoinSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinSubscriptionRequest proto.InternalMessageInfo

func (m *MsgJoinSubscriptionRequest) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *MsgJoinSubscriptionRequest) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

type MsgJoinSubscriptionRequestResponse struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (m *MsgJoinSubscriptionRequestResponse) Reset()         { *m = MsgJoinSubscriptionRequestResponse{} }
func (m *MsgJoinSubscriptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinSubscriptionRequestResponse) ProtoMessage()    {}
func (*MsgJoinSubscriptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{11}
}
func (m *MsgJoinSubscriptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinSubscriptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinSubscriptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinSubscriptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinSubscriptionRequestResponse.Merge(m, src)
}
func (m *MsgJoinSubscriptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinSubscriptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinSubscriptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinSubscriptionRequestResponse proto.InternalMessageInfo

func (m *MsgJoinSubscriptionRequestResponse) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

type MsgLeaveSubscriptionRequest struct {
	Subscriber            string `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	SubscriptionRequestId string `protobuf:"bytes,2,opt,name=subscription_request_id,json=subscriptionRequestId,proto3" json:"subscription_request_id,omitempty"`
}

func (m *MsgLeaveSubscriptionRequest) Reset()         { *m = MsgLeaveSubscriptionRequest{} }
func (m *MsgLeaveSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveSubscriptionRequest) ProtoMessage()    {}
func (*MsgLeaveSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{12}
}
func (m *MsgLeaveSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveSubscriptionRequest.Merge(m, src)
}
func (m *MsgLeaveSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveSubscriptionRequest proto.InternalMessageInfo

func (m *MsgLeaveSubscriptionRequest) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *MsgLeaveSubscriptionRequest) GetSubscriptionRequestId() string {
	if m != nil {
		return m.SubscriptionRequestId
	}
	return ""
}

type MsgLeaveSubscriptionRequestResponse struct {
}

func (m *MsgLeaveSubscriptionRequestResponse) Reset()         { *m = MsgLeaveSubscriptionRequestResponse{} }
func (m *MsgLeaveSubscriptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveSubscriptionRequestResponse) ProtoMessage()    {}
func (*MsgLeaveSubscriptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{13}
}
func (m *MsgLeaveSubscriptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveSubscriptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveSubscriptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveSubscriptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveSubscriptionRequestResponse.Merge(m, src)
}
func (m *MsgLeaveSubscriptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveSubscriptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveSubscriptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveSubscriptionRequestResponse proto.InternalMessageInfo

type MsgSubmitProgress struct {
	Subscriber             string   `protobuf:"bytes,1,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	SubscriptionId         string   `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	PreviousVerticesHashes []string `protobuf:"bytes,3,rep,name=previous_vertices_hashes,json=previousVerticesHashes,proto3" json:"previous_vertices_hashes,omitempty"`
	ObfuscatedVerticesHash string   `protobuf:"bytes,4,opt,name=obfuscated_vertices_hash,json=obfuscatedVerticesHash,proto3" json:"obfuscated_vertices_hash,omitempty"`
}

func (m *MsgSubmitProgress) Reset()         { *m = MsgSubmitProgress{} }
func (m *MsgSubmitProgress) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProgress) ProtoMessage()    {}
func (*MsgSubmitProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{14}
}
func (m *MsgSubmitProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProgress.Merge(m, src)
}
func (m *MsgSubmitProgress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProgress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProgress proto.InternalMessageInfo

func (m *MsgSubmitProgress) GetSubscriber() string {
	if m != nil {
		return m.Subscriber
	}
	return ""
}

func (m *MsgSubmitProgress) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *MsgSubmitProgress) GetPreviousVerticesHashes() []string {
	if m != nil {
		return m.PreviousVerticesHashes
	}
	return nil
}

func (m *MsgSubmitProgress) GetObfuscatedVerticesHash() string {
	if m != nil {
		return m.ObfuscatedVerticesHash
	}
	return ""
}

type MsgSubmitProgressResponse struct {
}

func (m *MsgSubmitProgressResponse) Reset()         { *m = MsgSubmitProgressResponse{} }
func (m *MsgSubmitProgressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProgressResponse) ProtoMessage()    {}
func (*MsgSubmitProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3ce497a4edf005b, []int{15}
}
func (m *MsgSubmitProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProgressResponse.Merge(m, src)
}
func (m *MsgSubmitProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProgressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "mandu.subscription.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "mandu.subscription.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateSubscriptionRequest)(nil), "mandu.subscription.MsgCreateSubscriptionRequest")
	proto.RegisterType((*MsgCreateSubscriptionRequestResponse)(nil), "mandu.subscription.MsgCreateSubscriptionRequestResponse")
	proto.RegisterType((*MsgCancelSubscriptionRequest)(nil), "mandu.subscription.MsgCancelSubscriptionRequest")
	proto.RegisterType((*MsgCancelSubscriptionRequestResponse)(nil), "mandu.subscription.MsgCancelSubscriptionRequestResponse")
	proto.RegisterType((*MsgUpdateSubscriptionRequest)(nil), "mandu.subscription.MsgUpdateSubscriptionRequest")
	proto.RegisterType((*MsgUpdateSubscriptionRequestResponse)(nil), "mandu.subscription.MsgUpdateSubscriptionRequestResponse")
	proto.RegisterType((*MsgIncrementSubscriptionRequestAmount)(nil), "mandu.subscription.MsgIncrementSubscriptionRequestAmount")
	proto.RegisterType((*MsgIncrementSubscriptionRequestAmountResponse)(nil), "mandu.subscription.MsgIncrementSubscriptionRequestAmountResponse")
	proto.RegisterType((*MsgJoinSubscriptionRequest)(nil), "mandu.subscription.MsgJoinSubscriptionRequest")
	proto.RegisterType((*MsgJoinSubscriptionRequestResponse)(nil), "mandu.subscription.MsgJoinSubscriptionRequestResponse")
	proto.RegisterType((*MsgLeaveSubscriptionRequest)(nil), "mandu.subscription.MsgLeaveSubscriptionRequest")
	proto.RegisterType((*MsgLeaveSubscriptionRequestResponse)(nil), "mandu.subscription.MsgLeaveSubscriptionRequestResponse")
	proto.RegisterType((*MsgSubmitProgress)(nil), "mandu.subscription.MsgSubmitProgress")
	proto.RegisterType((*MsgSubmitProgressResponse)(nil), "mandu.subscription.MsgSubmitProgressResponse")
}

func init() { proto.RegisterFile("mandu/subscription/tx.proto", fileDescriptor_a3ce497a4edf005b) }

var fileDescriptor_a3ce497a4edf005b = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0xcf, 0x64, 0xdb, 0x4d, 0xf6, 0x15, 0x25, 0x74, 0x54, 0xb2, 0x8e, 0x53, 0x36, 0x91, 0xdb,
	0x40, 0x08, 0xca, 0x6e, 0x29, 0x28, 0x2d, 0x95, 0x38, 0x24, 0x48, 0x88, 0x20, 0x2c, 0x55, 0x8e,
	0xe0, 0xc0, 0x01, 0xe3, 0xb5, 0x27, 0xce, 0x88, 0xd8, 0x63, 0x66, 0xc6, 0xa1, 0xed, 0x09, 0x50,
	0x01, 0x89, 0x13, 0x9f, 0x80, 0x03, 0x02, 0x89, 0x63, 0x0e, 0x7c, 0x01, 0x6e, 0x3d, 0x56, 0x9c,
	0x38, 0x21, 0x48, 0x0e, 0xf9, 0x00, 0x7c, 0x01, 0xe4, 0xb1, 0xd7, 0xf1, 0x66, 0x77, 0x36, 0xd9,
	0x1e, 0xd2, 0xcb, 0xae, 0xe7, 0xfd, 0xde, 0x9f, 0xdf, 0x7b, 0xf3, 0xe6, 0xcd, 0xc0, 0x42, 0xe4,
	0xc5, 0x41, 0xda, 0x11, 0x69, 0x57, 0xf8, 0x9c, 0x26, 0x92, 0xb2, 0xb8, 0x23, 0x1f, 0xb4, 0x13,
	0xce, 0x24, 0xc3, 0x58, 0x81, 0xed, 0x2a, 0x68, 0x5e, 0xf5, 0x22, 0x1a, 0xb3, 0x8e, 0xfa, 0xcd,
	0xd5, 0xcc, 0xa6, 0xcf, 0x44, 0xc4, 0x44, 0x27, 0x12, 0x61, 0x67, 0xff, 0x8d, 0xec, 0xaf, 0x00,
	0xe6, 0x73, 0xc0, 0x55, 0xab, 0x4e, 0xbe, 0x28, 0xa0, 0x6b, 0x21, 0x0b, 0x59, 0x2e, 0xcf, 0xbe,
	0x0a, 0xe9, 0xe2, 0x10, 0x36, 0x89, 0xc7, 0xbd, 0xa8, 0x30, 0xb3, 0xfe, 0x40, 0x30, 0x6b, 0x8b,
	0xf0, 0xa3, 0x24, 0xf0, 0x24, 0xb9, 0xaf, 0x10, 0xbc, 0x0e, 0x0d, 0x2f, 0x95, 0xbb, 0x8c, 0x53,
	0xf9, 0xd0, 0x40, 0x4b, 0x68, 0xa5, 0xb1, 0x69, 0xfc, 0xf9, 0xfb, 0xda, 0xb5, 0x22, 0xde, 0x46,
	0x10, 0x70, 0x22, 0xc4, 0xb6, 0xe4, 0x34, 0x0e, 0x9d, 0x13, 0x55, 0xfc, 0x0e, 0xd4, 0x73, 0xdf,
	0xc6, 0xe4, 0x12, 0x5a, 0xb9, 0x72, 0xdb, 0x6c, 0x0f, 0xa6, 0xdb, 0xce, 0x63, 0x6c, 0x36, 0x9e,
	0xfc, 0xbd, 0x38, 0xf1, 0xdb, 0xf1, 0xc1, 0x2a, 0x72, 0x0a, 0xa3, 0x7b, 0x77, 0xbe, 0x39, 0x3e,
	0x58, 0x3d, 0x71, 0xf7, 0xc3, 0xf1, 0xc1, 0xea, 0xcd, 0x9c, 0xfe, 0x83, 0xfe, 0x04, 0x4e, 0xf1,
	0xb5, 0xe6, 0xa1, 0x79, 0x4a, 0xe4, 0x10, 0x91, 0xb0, 0x58, 0x10, 0xeb, 0xa7, 0x49, 0xb8, 0x6e,
	0x8b, 0xf0, 0x5d, 0x4e, 0x3c, 0x49, 0xb6, 0x2b, 0x4e, 0x1c, 0xf2, 0x45, 0x4a, 0x84, 0xc4, 0xd7,
	0xa1, 0xc1, 0xf3, 0x4f, 0xc2, 0xf3, 0x5c, 0x9d, 0x13, 0x01, 0x9e, 0x83, 0xba, 0x17, 0xb1, 0x34,
	0x96, 0x2a, 0xa3, 0x9a, 0x53, 0xac, 0xf0, 0x22, 0x5c, 0x11, 0xd2, 0xe3, 0xd2, 0xed, 0xee, 0x31,
	0xff, 0x73, 0xa3, 0xa6, 0x40, 0x50, 0xa2, 0xcd, 0x4c, 0x82, 0x5f, 0x06, 0x20, 0x09, 0xf3, 0x77,
	0x5d, 0x41, 0x1f, 0x11, 0xe3, 0x92, 0xc2, 0x1b, 0x4a, 0xb2, 0x4d, 0x1f, 0x11, 0x6c, 0xc2, 0x74,
	0x90, 0x72, 0x2f, 0x23, 0x62, 0x5c, 0x56, 0x60, 0xb9, 0xc6, 0x4d, 0x98, 0x0a, 0x78, 0xe2, 0xd2,
	0x40, 0x18, 0xf5, 0xa5, 0xda, 0x4a, 0xc3, 0xa9, 0x07, 0x3c, 0xd9, 0x0a, 0x04, 0x36, 0x60, 0xea,
	0x4b, 0x4e, 0x25, 0xe1, 0xc2, 0x98, 0x52, 0x40, 0x6f, 0x89, 0x5f, 0x83, 0x17, 0x69, 0x4c, 0x25,
	0xf5, 0xf6, 0xdc, 0x1d, 0xce, 0x62, 0x49, 0x09, 0x37, 0xa6, 0x95, 0xca, 0x6c, 0x21, 0x7f, 0xaf,
	0x10, 0xdf, 0x9b, 0x51, 0x45, 0x2e, 0x33, 0xb4, 0x3e, 0x85, 0x9b, 0xa3, 0xea, 0xd3, 0x2b, 0x24,
	0x5e, 0x87, 0x66, 0x75, 0x0f, 0xdc, 0xc2, 0x83, 0x4b, 0x83, 0xa2, 0x6a, 0x2f, 0x89, 0x41, 0xeb,
	0xad, 0xc0, 0x7a, 0x8c, 0xf2, 0x0d, 0xf0, 0x62, 0x9f, 0xec, 0x8d, 0xbf, 0x01, 0x23, 0xc2, 0x4e,
	0x8e, 0x08, 0x3b, 0x90, 0xe6, 0x2b, 0x79, 0x9a, 0x3a, 0x16, 0x65, 0xbf, 0xfc, 0x97, 0xd3, 0xcd,
	0x7b, 0xe9, 0xc2, 0xe8, 0x56, 0xfa, 0xac, 0x36, 0xaa, 0xcf, 0x2e, 0x0d, 0xf4, 0xd9, 0xa8, 0x46,
	0xd2, 0xf6, 0x8b, 0xa6, 0x3a, 0xda, 0xa4, 0xcb, 0xea, 0xfc, 0x8a, 0x60, 0xd9, 0x16, 0xe1, 0x56,
	0xec, 0x73, 0x12, 0x91, 0x58, 0x0e, 0xd1, 0xdd, 0xc8, 0x89, 0x5f, 0x68, 0x99, 0x06, 0xf2, 0xe9,
	0xc0, 0xda, 0xb9, 0x68, 0x96, 0x89, 0x7d, 0x8b, 0xc0, 0xb4, 0x45, 0xf8, 0x01, 0xa3, 0xf1, 0xb0,
	0x4d, 0x6f, 0x01, 0x14, 0x84, 0xba, 0x65, 0x3a, 0x15, 0xc9, 0x33, 0x77, 0xe9, 0x6c, 0xc6, 0xbb,
	0xe2, 0xc8, 0xb2, 0xc1, 0xd2, 0xd3, 0x28, 0xcf, 0xe2, 0xab, 0x30, 0xdb, 0x17, 0xae, 0x3c, 0x83,
	0x33, 0x55, 0xf1, 0x56, 0x60, 0x7d, 0x87, 0x60, 0xc1, 0x16, 0xe1, 0x87, 0xc4, 0xdb, 0x27, 0xcf,
	0x35, 0xaf, 0x65, 0xb8, 0x31, 0x82, 0x47, 0xb9, 0x0d, 0xff, 0x22, 0xb8, 0x6a, 0x8b, 0x70, 0x3b,
	0xed, 0x46, 0x54, 0xde, 0xe7, 0x2c, 0xcc, 0xee, 0x99, 0x33, 0x59, 0x0e, 0x29, 0xc7, 0xe4, 0xb0,
	0x72, 0xe0, 0xbb, 0x60, 0x24, 0x9c, 0xec, 0x53, 0x96, 0x0a, 0x77, 0x9f, 0x70, 0x49, 0x7d, 0x22,
	0xdc, 0x5d, 0x4f, 0xec, 0x12, 0x61, 0xd4, 0xd4, 0x09, 0x99, 0xeb, 0xe1, 0x1f, 0x17, 0xf0, 0xfb,
	0x0a, 0xcd, 0x2c, 0x59, 0x77, 0x27, 0x15, 0xbe, 0x27, 0x49, 0xd0, 0x6f, 0xab, 0x0e, 0x65, 0xc3,
	0x99, 0x3b, 0xc1, 0xab, 0xb6, 0x83, 0xa5, 0x58, 0x80, 0xf9, 0x81, 0x14, 0x7b, 0x05, 0xb8, 0xfd,
	0xcb, 0x34, 0xd4, 0x6c, 0x11, 0xe2, 0xcf, 0xe0, 0x85, 0xbe, 0x1b, 0xf9, 0xc6, 0xb0, 0x9b, 0xf4,
	0xd4, 0x9d, 0x67, 0xbe, 0x7e, 0x0e, 0xa5, 0xb2, 0x87, 0xbe, 0x47, 0x30, 0xaf, 0xbf, 0x15, 0x6f,
	0x69, 0x5c, 0x69, 0x2d, 0xcc, 0xbb, 0xe3, 0x5a, 0xf4, 0x33, 0xd1, 0x5e, 0x0f, 0x5a, 0x26, 0x3a,
	0x0b, 0x3d, 0x93, 0xb3, 0x86, 0xbf, 0x62, 0xa2, 0x9f, 0xfc, 0xb7, 0x46, 0x96, 0x77, 0x1c, 0x26,
	0x67, 0x0e, 0x5a, 0xfc, 0x33, 0x02, 0xeb, 0x1c, 0x53, 0xf6, 0x6d, 0x4d, 0x80, 0xb3, 0x4d, 0xcd,
	0x8d, 0x67, 0x36, 0x2d, 0x49, 0x7e, 0x8d, 0xa0, 0xa9, 0x9b, 0x98, 0x6d, 0x8d, 0x7b, 0x8d, 0xbe,
	0xb9, 0x3e, 0x9e, 0x7e, 0xc9, 0xe1, 0x31, 0x02, 0x43, 0x3b, 0xde, 0x3a, 0x1a, 0xa7, 0x3a, 0x03,
	0xf3, 0xce, 0x98, 0x06, 0x25, 0x8d, 0x1d, 0x98, 0x39, 0x35, 0xb4, 0x96, 0x35, 0xae, 0xfa, 0xd5,
	0xcc, 0xb5, 0x73, 0xa9, 0xf5, 0xe2, 0x98, 0x97, 0xbf, 0xca, 0x5e, 0xcc, 0x9b, 0x6f, 0x3d, 0x39,
	0x6c, 0xa1, 0xa7, 0x87, 0x2d, 0xf4, 0xcf, 0x61, 0x0b, 0xfd, 0x78, 0xd4, 0x9a, 0x78, 0x7a, 0xd4,
	0x9a, 0xf8, 0xeb, 0xa8, 0x35, 0xf1, 0x89, 0x39, 0xf4, 0xc1, 0x2c, 0x1f, 0x26, 0x44, 0x74, 0xeb,
	0xea, 0xc5, 0xff, 0xe6, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xe1, 0x8b, 0x45, 0xa2, 0x0c,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateSubscriptionRequest(ctx context.Context, in *MsgCreateSubscriptionRequest, opts ...grpc.CallOption) (*MsgCreateSubscriptionRequestResponse, error)
	CancelSubscriptionRequest(ctx context.Context, in *MsgCancelSubscriptionRequest, opts ...grpc.CallOption) (*MsgCancelSubscriptionRequestResponse, error)
	UpdateSubscriptionRequest(ctx context.Context, in *MsgUpdateSubscriptionRequest, opts ...grpc.CallOption) (*MsgUpdateSubscriptionRequestResponse, error)
	IncrementSubscriptionRequestAmount(ctx context.Context, in *MsgIncrementSubscriptionRequestAmount, opts ...grpc.CallOption) (*MsgIncrementSubscriptionRequestAmountResponse, error)
	JoinSubscriptionRequest(ctx context.Context, in *MsgJoinSubscriptionRequest, opts ...grpc.CallOption) (*MsgJoinSubscriptionRequestResponse, error)
	LeaveSubscriptionRequest(ctx context.Context, in *MsgLeaveSubscriptionRequest, opts ...grpc.CallOption) (*MsgLeaveSubscriptionRequestResponse, error)
	SubmitProgress(ctx context.Context, in *MsgSubmitProgress, opts ...grpc.CallOption) (*MsgSubmitProgressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSubscriptionRequest(ctx context.Context, in *MsgCreateSubscriptionRequest, opts ...grpc.CallOption) (*MsgCreateSubscriptionRequestResponse, error) {
	out := new(MsgCreateSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/CreateSubscriptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSubscriptionRequest(ctx context.Context, in *MsgCancelSubscriptionRequest, opts ...grpc.CallOption) (*MsgCancelSubscriptionRequestResponse, error) {
	out := new(MsgCancelSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/CancelSubscriptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSubscriptionRequest(ctx context.Context, in *MsgUpdateSubscriptionRequest, opts ...grpc.CallOption) (*MsgUpdateSubscriptionRequestResponse, error) {
	out := new(MsgUpdateSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/UpdateSubscriptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IncrementSubscriptionRequestAmount(ctx context.Context, in *MsgIncrementSubscriptionRequestAmount, opts ...grpc.CallOption) (*MsgIncrementSubscriptionRequestAmountResponse, error) {
	out := new(MsgIncrementSubscriptionRequestAmountResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/IncrementSubscriptionRequestAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinSubscriptionRequest(ctx context.Context, in *MsgJoinSubscriptionRequest, opts ...grpc.CallOption) (*MsgJoinSubscriptionRequestResponse, error) {
	out := new(MsgJoinSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/JoinSubscriptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveSubscriptionRequest(ctx context.Context, in *MsgLeaveSubscriptionRequest, opts ...grpc.CallOption) (*MsgLeaveSubscriptionRequestResponse, error) {
	out := new(MsgLeaveSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/LeaveSubscriptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProgress(ctx context.Context, in *MsgSubmitProgress, opts ...grpc.CallOption) (*MsgSubmitProgressResponse, error) {
	out := new(MsgSubmitProgressResponse)
	err := c.cc.Invoke(ctx, "/mandu.subscription.Msg/SubmitProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateSubscriptionRequest(context.Context, *MsgCreateSubscriptionRequest) (*MsgCreateSubscriptionRequestResponse, error)
	CancelSubscriptionRequest(context.Context, *MsgCancelSubscriptionRequest) (*MsgCancelSubscriptionRequestResponse, error)
	UpdateSubscriptionRequest(context.Context, *MsgUpdateSubscriptionRequest) (*MsgUpdateSubscriptionRequestResponse, error)
	IncrementSubscriptionRequestAmount(context.Context, *MsgIncrementSubscriptionRequestAmount) (*MsgIncrementSubscriptionRequestAmountResponse, error)
	JoinSubscriptionRequest(context.Context, *MsgJoinSubscriptionRequest) (*MsgJoinSubscriptionRequestResponse, error)
	LeaveSubscriptionRequest(context.Context, *MsgLeaveSubscriptionRequest) (*MsgLeaveSubscriptionRequestResponse, error)
	SubmitProgress(context.Context, *MsgSubmitProgress) (*MsgSubmitProgressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateSubscriptionRequest(ctx context.Context, req *MsgCreateSubscriptionRequest) (*MsgCreateSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionRequest not implemented")
}
func (*UnimplementedMsgServer) CancelSubscriptionRequest(ctx context.Context, req *MsgCancelSubscriptionRequest) (*MsgCancelSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscriptionRequest not implemented")
}
func (*UnimplementedMsgServer) UpdateSubscriptionRequest(ctx context.Context, req *MsgUpdateSubscriptionRequest) (*MsgUpdateSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionRequest not implemented")
}
func (*UnimplementedMsgServer) IncrementSubscriptionRequestAmount(ctx context.Context, req *MsgIncrementSubscriptionRequestAmount) (*MsgIncrementSubscriptionRequestAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementSubscriptionRequestAmount not implemented")
}
func (*UnimplementedMsgServer) JoinSubscriptionRequest(ctx context.Context, req *MsgJoinSubscriptionRequest) (*MsgJoinSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSubscriptionRequest not implemented")
}
func (*UnimplementedMsgServer) LeaveSubscriptionRequest(ctx context.Context, req *MsgLeaveSubscriptionRequest) (*MsgLeaveSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSubscriptionRequest not implemented")
}
func (*UnimplementedMsgServer) SubmitProgress(ctx context.Context, req *MsgSubmitProgress) (*MsgSubmitProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProgress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/CreateSubscriptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubscriptionRequest(ctx, req.(*MsgCreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/CancelSubscriptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSubscriptionRequest(ctx, req.(*MsgCancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/UpdateSubscriptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSubscriptionRequest(ctx, req.(*MsgUpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IncrementSubscriptionRequestAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncrementSubscriptionRequestAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IncrementSubscriptionRequestAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/IncrementSubscriptionRequestAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IncrementSubscriptionRequestAmount(ctx, req.(*MsgIncrementSubscriptionRequestAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/JoinSubscriptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinSubscriptionRequest(ctx, req.(*MsgJoinSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/LeaveSubscriptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveSubscriptionRequest(ctx, req.(*MsgLeaveSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mandu.subscription.Msg/SubmitProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProgress(ctx, req.(*MsgSubmitProgress))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mandu.subscription.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateSubscriptionRequest",
			Handler:    _Msg_CreateSubscriptionRequest_Handler,
		},
		{
			MethodName: "CancelSubscriptionRequest",
			Handler:    _Msg_CancelSubscriptionRequest_Handler,
		},
		{
			MethodName: "UpdateSubscriptionRequest",
			Handler:    _Msg_UpdateSubscriptionRequest_Handler,
		},
		{
			MethodName: "IncrementSubscriptionRequestAmount",
			Handler:    _Msg_IncrementSubscriptionRequestAmount_Handler,
		},
		{
			MethodName: "JoinSubscriptionRequest",
			Handler:    _Msg_JoinSubscriptionRequest_Handler,
		},
		{
			MethodName: "LeaveSubscriptionRequest",
			Handler:    _Msg_LeaveSubscriptionRequest_Handler,
		},
		{
			MethodName: "SubmitProgress",
			Handler:    _Msg_SubmitProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mandu/subscription/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialFrontier) > 0 {
		for iNdEx := len(m.InitialFrontier) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitialFrontier[iNdEx])
			copy(dAtA[i:], m.InitialFrontier[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.InitialFrontier[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Writers) > 0 {
		for iNdEx := len(m.Writers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Writers[iNdEx])
			copy(dAtA[i:], m.Writers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Writers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DrpIds) > 0 {
		for iNdEx := len(m.DrpIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DrpIds[iNdEx])
			copy(dAtA[i:], m.DrpIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DrpIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.EpochSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochSize))
		i--
		dAtA[i] = 0x20
	}
	if m.StartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubscriptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubscriptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubscriptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSubscriptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSubscriptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSubscriptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Writers) > 0 {
		for iNdEx := len(m.Writers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Writers[iNdEx])
			copy(dAtA[i:], m.Writers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Writers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.StartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubscriptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubscriptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubscriptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIncrementSubscriptionRequestAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncrementSubscriptionRequestAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncrementSubscriptionRequestAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIncrementSubscriptionRequestAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncrementSubscriptionRequestAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncrementSubscriptionRequestAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinSubscriptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinSubscriptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinSubscriptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestId) > 0 {
		i -= len(m.SubscriptionRequestId)
		copy(dAtA[i:], m.SubscriptionRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveSubscriptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveSubscriptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveSubscriptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObfuscatedVerticesHash) > 0 {
		i -= len(m.ObfuscatedVerticesHash)
		copy(dAtA[i:], m.ObfuscatedVerticesHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObfuscatedVerticesHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreviousVerticesHashes) > 0 {
		for iNdEx := len(m.PreviousVerticesHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreviousVerticesHashes[iNdEx])
			copy(dAtA[i:], m.PreviousVerticesHashes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.PreviousVerticesHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subscriber) > 0 {
		i -= len(m.Subscriber)
		copy(dAtA[i:], m.Subscriber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Subscriber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.StartBlock != 0 {
		n += 1 + sovTx(uint64(m.StartBlock))
	}
	if m.EpochSize != 0 {
		n += 1 + sovTx(uint64(m.EpochSize))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	if len(m.DrpIds) > 0 {
		for _, s := range m.DrpIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Writers) > 0 {
		for _, s := range m.Writers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.InitialFrontier) > 0 {
		for _, s := range m.InitialFrontier {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateSubscriptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelSubscriptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.StartBlock != 0 {
		n += 1 + sovTx(uint64(m.StartBlock))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	if len(m.Writers) > 0 {
		for _, s := range m.Writers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateSubscriptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIncrementSubscriptionRequestAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgIncrementSubscriptionRequestAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinSubscriptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveSubscriptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subscriber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PreviousVerticesHashes) > 0 {
		for _, s := range m.PreviousVerticesHashes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ObfuscatedVerticesHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochSize", wireType)
			}
			m.EpochSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrpIds = append(m.DrpIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Writers = append(m.Writers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialFrontier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialFrontier = append(m.InitialFrontier, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubscriptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubscriptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubscriptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSubscriptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSubscriptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSubscriptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Writers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Writers = append(m.Writers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubscriptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubscriptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubscriptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncrementSubscriptionRequestAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncrementSubscriptionRequestAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncrementSubscriptionRequestAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncrementSubscriptionRequestAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncrementSubscriptionRequestAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncrementSubscriptionRequestAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinSubscriptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinSubscriptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinSubscriptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveSubscriptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveSubscriptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveSubscriptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousVerticesHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousVerticesHashes = append(m.PreviousVerticesHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObfuscatedVerticesHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObfuscatedVerticesHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
