// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mandu/subscription/tx.proto

package subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                       = "/mandu.subscription.Msg/UpdateParams"
	Msg_CreateSubscriptionRequest_FullMethodName          = "/mandu.subscription.Msg/CreateSubscriptionRequest"
	Msg_CancelSubscriptionRequest_FullMethodName          = "/mandu.subscription.Msg/CancelSubscriptionRequest"
	Msg_UpdateSubscriptionRequest_FullMethodName          = "/mandu.subscription.Msg/UpdateSubscriptionRequest"
	Msg_IncrementSubscriptionRequestAmount_FullMethodName = "/mandu.subscription.Msg/IncrementSubscriptionRequestAmount"
	Msg_JoinSubscriptionRequest_FullMethodName            = "/mandu.subscription.Msg/JoinSubscriptionRequest"
	Msg_LeaveSubscriptionRequest_FullMethodName           = "/mandu.subscription.Msg/LeaveSubscriptionRequest"
	Msg_SubmitProgress_FullMethodName                     = "/mandu.subscription.Msg/SubmitProgress"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateSubscriptionRequest(ctx context.Context, in *MsgCreateSubscriptionRequest, opts ...grpc.CallOption) (*MsgCreateSubscriptionRequestResponse, error)
	CancelSubscriptionRequest(ctx context.Context, in *MsgCancelSubscriptionRequest, opts ...grpc.CallOption) (*MsgCancelSubscriptionRequestResponse, error)
	UpdateSubscriptionRequest(ctx context.Context, in *MsgUpdateSubscriptionRequest, opts ...grpc.CallOption) (*MsgUpdateSubscriptionRequestResponse, error)
	IncrementSubscriptionRequestAmount(ctx context.Context, in *MsgIncrementSubscriptionRequestAmount, opts ...grpc.CallOption) (*MsgIncrementSubscriptionRequestAmountResponse, error)
	JoinSubscriptionRequest(ctx context.Context, in *MsgJoinSubscriptionRequest, opts ...grpc.CallOption) (*MsgJoinSubscriptionRequestResponse, error)
	LeaveSubscriptionRequest(ctx context.Context, in *MsgLeaveSubscriptionRequest, opts ...grpc.CallOption) (*MsgLeaveSubscriptionRequestResponse, error)
	SubmitProgress(ctx context.Context, in *MsgSubmitProgress, opts ...grpc.CallOption) (*MsgSubmitProgressResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSubscriptionRequest(ctx context.Context, in *MsgCreateSubscriptionRequest, opts ...grpc.CallOption) (*MsgCreateSubscriptionRequestResponse, error) {
	out := new(MsgCreateSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSubscriptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSubscriptionRequest(ctx context.Context, in *MsgCancelSubscriptionRequest, opts ...grpc.CallOption) (*MsgCancelSubscriptionRequestResponse, error) {
	out := new(MsgCancelSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CancelSubscriptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSubscriptionRequest(ctx context.Context, in *MsgUpdateSubscriptionRequest, opts ...grpc.CallOption) (*MsgUpdateSubscriptionRequestResponse, error) {
	out := new(MsgUpdateSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSubscriptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IncrementSubscriptionRequestAmount(ctx context.Context, in *MsgIncrementSubscriptionRequestAmount, opts ...grpc.CallOption) (*MsgIncrementSubscriptionRequestAmountResponse, error) {
	out := new(MsgIncrementSubscriptionRequestAmountResponse)
	err := c.cc.Invoke(ctx, Msg_IncrementSubscriptionRequestAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinSubscriptionRequest(ctx context.Context, in *MsgJoinSubscriptionRequest, opts ...grpc.CallOption) (*MsgJoinSubscriptionRequestResponse, error) {
	out := new(MsgJoinSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_JoinSubscriptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveSubscriptionRequest(ctx context.Context, in *MsgLeaveSubscriptionRequest, opts ...grpc.CallOption) (*MsgLeaveSubscriptionRequestResponse, error) {
	out := new(MsgLeaveSubscriptionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_LeaveSubscriptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProgress(ctx context.Context, in *MsgSubmitProgress, opts ...grpc.CallOption) (*MsgSubmitProgressResponse, error) {
	out := new(MsgSubmitProgressResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateSubscriptionRequest(context.Context, *MsgCreateSubscriptionRequest) (*MsgCreateSubscriptionRequestResponse, error)
	CancelSubscriptionRequest(context.Context, *MsgCancelSubscriptionRequest) (*MsgCancelSubscriptionRequestResponse, error)
	UpdateSubscriptionRequest(context.Context, *MsgUpdateSubscriptionRequest) (*MsgUpdateSubscriptionRequestResponse, error)
	IncrementSubscriptionRequestAmount(context.Context, *MsgIncrementSubscriptionRequestAmount) (*MsgIncrementSubscriptionRequestAmountResponse, error)
	JoinSubscriptionRequest(context.Context, *MsgJoinSubscriptionRequest) (*MsgJoinSubscriptionRequestResponse, error)
	LeaveSubscriptionRequest(context.Context, *MsgLeaveSubscriptionRequest) (*MsgLeaveSubscriptionRequestResponse, error)
	SubmitProgress(context.Context, *MsgSubmitProgress) (*MsgSubmitProgressResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateSubscriptionRequest(context.Context, *MsgCreateSubscriptionRequest) (*MsgCreateSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionRequest not implemented")
}
func (UnimplementedMsgServer) CancelSubscriptionRequest(context.Context, *MsgCancelSubscriptionRequest) (*MsgCancelSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscriptionRequest not implemented")
}
func (UnimplementedMsgServer) UpdateSubscriptionRequest(context.Context, *MsgUpdateSubscriptionRequest) (*MsgUpdateSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionRequest not implemented")
}
func (UnimplementedMsgServer) IncrementSubscriptionRequestAmount(context.Context, *MsgIncrementSubscriptionRequestAmount) (*MsgIncrementSubscriptionRequestAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementSubscriptionRequestAmount not implemented")
}
func (UnimplementedMsgServer) JoinSubscriptionRequest(context.Context, *MsgJoinSubscriptionRequest) (*MsgJoinSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSubscriptionRequest not implemented")
}
func (UnimplementedMsgServer) LeaveSubscriptionRequest(context.Context, *MsgLeaveSubscriptionRequest) (*MsgLeaveSubscriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSubscriptionRequest not implemented")
}
func (UnimplementedMsgServer) SubmitProgress(context.Context, *MsgSubmitProgress) (*MsgSubmitProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProgress not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSubscriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubscriptionRequest(ctx, req.(*MsgCreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelSubscriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSubscriptionRequest(ctx, req.(*MsgCancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSubscriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSubscriptionRequest(ctx, req.(*MsgUpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IncrementSubscriptionRequestAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncrementSubscriptionRequestAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IncrementSubscriptionRequestAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IncrementSubscriptionRequestAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IncrementSubscriptionRequestAmount(ctx, req.(*MsgIncrementSubscriptionRequestAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_JoinSubscriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinSubscriptionRequest(ctx, req.(*MsgJoinSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveSubscriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveSubscriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LeaveSubscriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveSubscriptionRequest(ctx, req.(*MsgLeaveSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProgress(ctx, req.(*MsgSubmitProgress))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mandu.subscription.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateSubscriptionRequest",
			Handler:    _Msg_CreateSubscriptionRequest_Handler,
		},
		{
			MethodName: "CancelSubscriptionRequest",
			Handler:    _Msg_CancelSubscriptionRequest_Handler,
		},
		{
			MethodName: "UpdateSubscriptionRequest",
			Handler:    _Msg_UpdateSubscriptionRequest_Handler,
		},
		{
			MethodName: "IncrementSubscriptionRequestAmount",
			Handler:    _Msg_IncrementSubscriptionRequestAmount_Handler,
		},
		{
			MethodName: "JoinSubscriptionRequest",
			Handler:    _Msg_JoinSubscriptionRequest_Handler,
		},
		{
			MethodName: "LeaveSubscriptionRequest",
			Handler:    _Msg_LeaveSubscriptionRequest_Handler,
		},
		{
			MethodName: "SubmitProgress",
			Handler:    _Msg_SubmitProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mandu/subscription/tx.proto",
}
