// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: topology/node/rpc.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TopologyRpc_SubscribeCro_FullMethodName    = "/topology.node.TopologyRpc/subscribeCro"
	TopologyRpc_UnsubscribeCro_FullMethodName  = "/topology.node.TopologyRpc/unsubscribeCro"
	TopologyRpc_GetCroHashGraph_FullMethodName = "/topology.node.TopologyRpc/getCroHashGraph"
)

// TopologyRpcClient is the client API for TopologyRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyRpcClient interface {
	SubscribeCro(ctx context.Context, in *SubscribeCroRequest, opts ...grpc.CallOption) (*SubscribeCroResponse, error)
	UnsubscribeCro(ctx context.Context, in *UnsubscribeCroRequest, opts ...grpc.CallOption) (*UnsubscribeCroResponse, error)
	GetCroHashGraph(ctx context.Context, in *GetCroHashGraphRequest, opts ...grpc.CallOption) (*GetCroHashGraphResponse, error)
}

type topologyRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyRpcClient(cc grpc.ClientConnInterface) TopologyRpcClient {
	return &topologyRpcClient{cc}
}

func (c *topologyRpcClient) SubscribeCro(ctx context.Context, in *SubscribeCroRequest, opts ...grpc.CallOption) (*SubscribeCroResponse, error) {
	out := new(SubscribeCroResponse)
	err := c.cc.Invoke(ctx, TopologyRpc_SubscribeCro_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyRpcClient) UnsubscribeCro(ctx context.Context, in *UnsubscribeCroRequest, opts ...grpc.CallOption) (*UnsubscribeCroResponse, error) {
	out := new(UnsubscribeCroResponse)
	err := c.cc.Invoke(ctx, TopologyRpc_UnsubscribeCro_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyRpcClient) GetCroHashGraph(ctx context.Context, in *GetCroHashGraphRequest, opts ...grpc.CallOption) (*GetCroHashGraphResponse, error) {
	out := new(GetCroHashGraphResponse)
	err := c.cc.Invoke(ctx, TopologyRpc_GetCroHashGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyRpcServer is the server API for TopologyRpc service.
// All implementations must embed UnimplementedTopologyRpcServer
// for forward compatibility
type TopologyRpcServer interface {
	SubscribeCro(context.Context, *SubscribeCroRequest) (*SubscribeCroResponse, error)
	UnsubscribeCro(context.Context, *UnsubscribeCroRequest) (*UnsubscribeCroResponse, error)
	GetCroHashGraph(context.Context, *GetCroHashGraphRequest) (*GetCroHashGraphResponse, error)
	mustEmbedUnimplementedTopologyRpcServer()
}

// UnimplementedTopologyRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTopologyRpcServer struct {
}

func (UnimplementedTopologyRpcServer) SubscribeCro(context.Context, *SubscribeCroRequest) (*SubscribeCroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeCro not implemented")
}
func (UnimplementedTopologyRpcServer) UnsubscribeCro(context.Context, *UnsubscribeCroRequest) (*UnsubscribeCroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeCro not implemented")
}
func (UnimplementedTopologyRpcServer) GetCroHashGraph(context.Context, *GetCroHashGraphRequest) (*GetCroHashGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCroHashGraph not implemented")
}
func (UnimplementedTopologyRpcServer) mustEmbedUnimplementedTopologyRpcServer() {}

// UnsafeTopologyRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyRpcServer will
// result in compilation errors.
type UnsafeTopologyRpcServer interface {
	mustEmbedUnimplementedTopologyRpcServer()
}

func RegisterTopologyRpcServer(s grpc.ServiceRegistrar, srv TopologyRpcServer) {
	s.RegisterService(&TopologyRpc_ServiceDesc, srv)
}

func _TopologyRpc_SubscribeCro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeCroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRpcServer).SubscribeCro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyRpc_SubscribeCro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRpcServer).SubscribeCro(ctx, req.(*SubscribeCroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyRpc_UnsubscribeCro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeCroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRpcServer).UnsubscribeCro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyRpc_UnsubscribeCro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRpcServer).UnsubscribeCro(ctx, req.(*UnsubscribeCroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyRpc_GetCroHashGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCroHashGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyRpcServer).GetCroHashGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyRpc_GetCroHashGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyRpcServer).GetCroHashGraph(ctx, req.(*GetCroHashGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopologyRpc_ServiceDesc is the grpc.ServiceDesc for TopologyRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "topology.node.TopologyRpc",
	HandlerType: (*TopologyRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subscribeCro",
			Handler:    _TopologyRpc_SubscribeCro_Handler,
		},
		{
			MethodName: "unsubscribeCro",
			Handler:    _TopologyRpc_UnsubscribeCro_Handler,
		},
		{
			MethodName: "getCroHashGraph",
			Handler:    _TopologyRpc_GetCroHashGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topology/node/rpc.proto",
}
