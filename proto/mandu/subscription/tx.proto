syntax = "proto3";

package mandu.subscription;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "mandu/subscription/params.proto";

option go_package = "mandu/x/subscription/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc CreateSubscriptionRequest(MsgCreateSubscriptionRequest) returns (MsgCreateSubscriptionRequestResponse);
  rpc CancelSubscriptionRequest(MsgCancelSubscriptionRequest) returns (MsgCancelSubscriptionRequestResponse);
  rpc UpdateSubscriptionRequest(MsgUpdateSubscriptionRequest) returns (MsgUpdateSubscriptionRequestResponse);
  rpc IncrementSubscriptionRequestAmount(MsgIncrementSubscriptionRequestAmount) returns (MsgIncrementSubscriptionRequestAmountResponse);
  rpc JoinSubscriptionRequest(MsgJoinSubscriptionRequest) returns (MsgJoinSubscriptionRequestResponse);
  rpc LeaveSubscriptionRequest(MsgLeaveSubscriptionRequest) returns (MsgLeaveSubscriptionRequestResponse);
  rpc SubmitProgress(MsgSubmitProgress) returns (MsgSubmitProgressResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "mandu/x/subscription/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateSubscriptionRequest {
  option (cosmos.msg.v1.signer) = "requester";
  string requester = 1;
  int64 amount = 2;
  int64 start_block = 3;
  int64 epoch_size = 4;
  int64 duration = 5;
  repeated string drp_ids = 6;
  repeated string writers = 7;
  repeated string initial_frontier = 8;
}

message MsgCreateSubscriptionRequestResponse {
  string subscription_request_id = 1;
}

message MsgCancelSubscriptionRequest {
  option (cosmos.msg.v1.signer) = "requester";
  string requester = 1;
  string subscription_request_id = 2;
}

message MsgCancelSubscriptionRequestResponse {}

message MsgUpdateSubscriptionRequest {
  option (cosmos.msg.v1.signer) = "requester";
  string requester = 1;
  string subscription_request_id = 2;
  // these fields should be optional, errors with pulsar
  int64 amount = 3;
  int64 start_block = 4;
  int64 duration = 5;
  repeated string writers = 7;
}

message MsgUpdateSubscriptionRequestResponse {}

message MsgIncrementSubscriptionRequestAmount {
  option (cosmos.msg.v1.signer) = "requester";
  string requester = 1;
  string subscription_request_id = 2;
  int64 amount = 3;
}

message MsgIncrementSubscriptionRequestAmountResponse {}

message MsgJoinSubscriptionRequest {
  option (cosmos.msg.v1.signer) = "subscriber";
  string subscriber = 1;
  string subscription_request_id = 2;
}

message MsgJoinSubscriptionRequestResponse {
  string subscription_id = 1;
}

message MsgLeaveSubscriptionRequest {
  option (cosmos.msg.v1.signer) = "subscriber";
  string subscriber = 1;
  string subscription_request_id = 2;
}

message MsgLeaveSubscriptionRequestResponse {}

message MsgSubmitProgress {
  option (cosmos.msg.v1.signer) = "subscriber";
  string subscriber = 1;
  string subscription_id = 2;
  repeated string previous_vertices_hashes = 3;
}

message MsgSubmitProgressResponse {}
